2018-05-21 02:38:02,596 INFO  DownloadService - Downloading "https://github.com/stephanenicolas/reflection-no-reflection/archive/master.zip", attempt 3
2018-05-21 02:38:03,014 INFO  DownloadService - Downloaded https://github.com/stephanenicolas/reflection-no-reflection/archive/master.zip, attempt 3
2018-05-21 02:38:03,014 INFO  DownloadService - Size of file "/tmp/rdisk/1263/master.zip": 275 KB
2018-05-21 02:38:03,014 INFO  ArchiveUtils - Checking entries [.gradle] in ZIP file...
2018-05-21 02:38:03,015 INFO  ArchiveUtils - Has entries [.gradle] in ZIP file /tmp/rdisk/1263/master.zip: true
2018-05-21 02:38:03,015 DEBUG ZipUtil - Extracting '/tmp/rdisk/1263/master.zip' into '/tmp/rdisk/1263/src'.
2018-05-21 02:38:03,037 INFO  FullProcessService - Size of directory with sources: 506 KB
2018-05-21 02:38:03,037 INFO  SysUtils - Execute command: [git, init, /tmp/rdisk/1263/src]
2018-05-21 02:38:03,042 INFO  SysUtils - Initialized empty Git repository in /tmp/rdisk/1263/src/.git/

2018-05-21 02:38:03,048 INFO  ProjectBuildService - Gradle wrapper(s): /tmp/rdisk/1263/src/reflection-no-reflection-master/gradlew /tmp/rdisk/1263/src/reflection-no-reflection-master/generator-integration-tests/gradlew
2018-05-21 02:38:03,054 INFO  ProjectBuildService - Build script(s): /tmp/rdisk/1263/src/reflection-no-reflection-master/build.gradle /tmp/rdisk/1263/src/reflection-no-reflection-master/generator-integration-tests/build.gradle /tmp/rdisk/1263/src/reflection-no-reflection-master/common-lib/build.gradle /tmp/rdisk/1263/src/reflection-no-reflection-master/generator/build.gradle /tmp/rdisk/1263/src/reflection-no-reflection-master/processor-sample/build.gradle /tmp/rdisk/1263/src/reflection-no-reflection-master/processor/build.gradle /tmp/rdisk/1263/src/reflection-no-reflection-master/sample-exploded/build.gradle /tmp/rdisk/1263/src/reflection-no-reflection-master/sample/build.gradle
2018-05-21 02:38:03,059 INFO  ProjectBuildService - All script(s): /tmp/rdisk/1263/src/reflection-no-reflection-master/settings.gradle /tmp/rdisk/1263/src/reflection-no-reflection-master/sample/build.gradle /tmp/rdisk/1263/src/reflection-no-reflection-master/sample-exploded/build.gradle /tmp/rdisk/1263/src/reflection-no-reflection-master/processor/build.gradle /tmp/rdisk/1263/src/reflection-no-reflection-master/processor-sample/build.gradle /tmp/rdisk/1263/src/reflection-no-reflection-master/generator/build.gradle /tmp/rdisk/1263/src/reflection-no-reflection-master/generator-integration-tests/build.gradle /tmp/rdisk/1263/src/reflection-no-reflection-master/common-lib/build.gradle /tmp/rdisk/1263/src/reflection-no-reflection-master/build.gradle
2018-05-21 02:38:03,059 INFO  ProjectBuildService - Remote scripts: none
2018-05-21 02:38:03,059 INFO  ProjectFixService - Fixing project...
2018-05-21 02:38:03,072 INFO  LocalPropertiesFixService - Created fake /tmp/rdisk/1263/src/reflection-no-reflection-master/local.properties
2018-05-21 02:38:03,072 INFO  WrapperPropertiesFixService - Gradle wrapper: https://services.gradle.org/distributions/gradle-2.2-bin.zip
2018-05-21 02:38:03,075 INFO  ProjectFixService - Build info for "/tmp/rdisk/1263/src/reflection-no-reflection-master/build.gradle": [buildToolsVersion=<null>,compileSdkVersion=<null>,minSdkVersion=<null>,targetSdkVersion=<null>]
2018-05-21 02:38:03,075 INFO  ProjectFixService - Fixed build info for "/tmp/rdisk/1263/src/reflection-no-reflection-master/build.gradle": [buildToolsVersion=28.0.0-rc1,compileSdkVersion=27,minSdkVersion=27,targetSdkVersion=27]
2018-05-21 02:38:03,075 INFO  LocalPropertiesFixService - Created fake /tmp/rdisk/1263/src/reflection-no-reflection-master/generator-integration-tests/local.properties
2018-05-21 02:38:03,076 INFO  WrapperPropertiesFixService - Gradle wrapper: https://services.gradle.org/distributions/gradle-2.4-bin.zip
2018-05-21 02:38:03,079 INFO  ProjectFixService - Build info for "/tmp/rdisk/1263/src/reflection-no-reflection-master/generator-integration-tests/build.gradle": [buildToolsVersion=<null>,compileSdkVersion=<null>,minSdkVersion=<null>,targetSdkVersion=<null>]
2018-05-21 02:38:03,079 INFO  ProjectFixService - Fixed build info for "/tmp/rdisk/1263/src/reflection-no-reflection-master/generator-integration-tests/build.gradle": [buildToolsVersion=28.0.0-rc1,compileSdkVersion=27,minSdkVersion=27,targetSdkVersion=27]
2018-05-21 02:38:03,079 INFO  LocalPropertiesFixService - Created fake /tmp/rdisk/1263/src/reflection-no-reflection-master/common-lib/local.properties
2018-05-21 02:38:03,082 INFO  ProjectFixService - Build info for "/tmp/rdisk/1263/src/reflection-no-reflection-master/common-lib/build.gradle": [buildToolsVersion=<null>,compileSdkVersion=<null>,minSdkVersion=<null>,targetSdkVersion=<null>]
2018-05-21 02:38:03,082 INFO  ProjectFixService - Fixed build info for "/tmp/rdisk/1263/src/reflection-no-reflection-master/common-lib/build.gradle": [buildToolsVersion=28.0.0-rc1,compileSdkVersion=27,minSdkVersion=27,targetSdkVersion=27]
2018-05-21 02:38:03,083 INFO  LocalPropertiesFixService - Created fake /tmp/rdisk/1263/src/reflection-no-reflection-master/generator/local.properties
2018-05-21 02:38:03,086 INFO  ProjectFixService - Build info for "/tmp/rdisk/1263/src/reflection-no-reflection-master/generator/build.gradle": [buildToolsVersion=<null>,compileSdkVersion=<null>,minSdkVersion=<null>,targetSdkVersion=<null>]
2018-05-21 02:38:03,086 INFO  ProjectFixService - Fixed build info for "/tmp/rdisk/1263/src/reflection-no-reflection-master/generator/build.gradle": [buildToolsVersion=28.0.0-rc1,compileSdkVersion=27,minSdkVersion=27,targetSdkVersion=27]
2018-05-21 02:38:03,086 INFO  LocalPropertiesFixService - Created fake /tmp/rdisk/1263/src/reflection-no-reflection-master/processor-sample/local.properties
2018-05-21 02:38:03,089 INFO  ProjectFixService - Build info for "/tmp/rdisk/1263/src/reflection-no-reflection-master/processor-sample/build.gradle": [buildToolsVersion=<null>,compileSdkVersion=<null>,minSdkVersion=<null>,targetSdkVersion=<null>]
2018-05-21 02:38:03,089 INFO  ProjectFixService - Fixed build info for "/tmp/rdisk/1263/src/reflection-no-reflection-master/processor-sample/build.gradle": [buildToolsVersion=28.0.0-rc1,compileSdkVersion=27,minSdkVersion=27,targetSdkVersion=27]
2018-05-21 02:38:03,090 INFO  LocalPropertiesFixService - Created fake /tmp/rdisk/1263/src/reflection-no-reflection-master/processor/local.properties
2018-05-21 02:38:03,092 INFO  ProjectFixService - Build info for "/tmp/rdisk/1263/src/reflection-no-reflection-master/processor/build.gradle": [buildToolsVersion=<null>,compileSdkVersion=<null>,minSdkVersion=<null>,targetSdkVersion=<null>]
2018-05-21 02:38:03,092 INFO  ProjectFixService - Fixed build info for "/tmp/rdisk/1263/src/reflection-no-reflection-master/processor/build.gradle": [buildToolsVersion=28.0.0-rc1,compileSdkVersion=27,minSdkVersion=27,targetSdkVersion=27]
2018-05-21 02:38:03,093 INFO  LocalPropertiesFixService - Created fake /tmp/rdisk/1263/src/reflection-no-reflection-master/sample-exploded/local.properties
2018-05-21 02:38:03,096 INFO  ProjectFixService - Build info for "/tmp/rdisk/1263/src/reflection-no-reflection-master/sample-exploded/build.gradle": [buildToolsVersion=<null>,compileSdkVersion=<null>,minSdkVersion=<null>,targetSdkVersion=<null>]
2018-05-21 02:38:03,096 INFO  ProjectFixService - Fixed build info for "/tmp/rdisk/1263/src/reflection-no-reflection-master/sample-exploded/build.gradle": [buildToolsVersion=28.0.0-rc1,compileSdkVersion=27,minSdkVersion=27,targetSdkVersion=27]
2018-05-21 02:38:03,096 INFO  LocalPropertiesFixService - Created fake /tmp/rdisk/1263/src/reflection-no-reflection-master/sample/local.properties
2018-05-21 02:38:03,099 INFO  ProjectFixService - Build info for "/tmp/rdisk/1263/src/reflection-no-reflection-master/sample/build.gradle": [buildToolsVersion=<null>,compileSdkVersion=<null>,minSdkVersion=<null>,targetSdkVersion=<null>]
2018-05-21 02:38:03,099 INFO  ProjectFixService - Fixed build info for "/tmp/rdisk/1263/src/reflection-no-reflection-master/sample/build.gradle": [buildToolsVersion=28.0.0-rc1,compileSdkVersion=27,minSdkVersion=27,targetSdkVersion=27]
2018-05-21 02:38:03,099 INFO  ProjectFixService - Project was maybe fixed
2018-05-21 02:38:03,099 INFO  ProjectTaskService - Detecting possible tasks...
2018-05-21 02:38:03,100 INFO  SysUtils - Execute command: [/tmp/rdisk/1263/src/reflection-no-reflection-master/gradlew, -b, /tmp/rdisk/1263/src/reflection-no-reflection-master/build.gradle, -Dorg.gradle.daemon=false, -Dorg.gradle.daemon.performance.enable-monitoring=false, -Dorg.gradle.configureondemand=true, tasks]
2018-05-21 02:38:12,140 INFO  ProjectTaskService - Detected possible tasks: 47
2018-05-21 02:38:12,140 INFO  ProjectTaskService - Excluded tasks (3): javadoc test check
2018-05-21 02:38:12,140 INFO  SysUtils - Execute command: [/tmp/rdisk/1263/src/reflection-no-reflection-master/gradlew, -b, /tmp/rdisk/1263/src/reflection-no-reflection-master/build.gradle, -Dorg.gradle.daemon=false, -Dorg.gradle.daemon.performance.enable-monitoring=false, -Dorg.gradle.configureondemand=true, --stacktrace, -x, javadoc, -x, test, -x, check, build]
2018-05-21 02:38:19,365 INFO  SysUtils - Configuration on demand is an incubating feature.
:common-lib:compileJava/tmp/rdisk/1263/src/reflection-no-reflection-master/common-lib/src/main/java/org/reflection_no_reflection/Method.java:12: warning: MethodRepository is internal proprietary API and may be removed in a future release
import sun.reflect.generics.repository.MethodRepository;
                                      ^
/tmp/rdisk/1263/src/reflection-no-reflection-master/common-lib/src/main/java/org/reflection_no_reflection/Constructor.java:9: warning: GenericsFactory is internal proprietary API and may be removed in a future release
import sun.reflect.generics.factory.GenericsFactory;
                                   ^
/tmp/rdisk/1263/src/reflection-no-reflection-master/common-lib/src/main/java/org/reflection_no_reflection/Constructor.java:10: warning: ConstructorRepository is internal proprietary API and may be removed in a future release
import sun.reflect.generics.repository.ConstructorRepository;
                                      ^
/tmp/rdisk/1263/src/reflection-no-reflection-master/common-lib/src/main/java/org/reflection_no_reflection/Method.java:27: warning: MethodRepository is internal proprietary API and may be removed in a future release
    private transient MethodRepository genericInfo;
                      ^
/tmp/rdisk/1263/src/reflection-no-reflection-master/common-lib/src/main/java/org/reflection_no_reflection/Method.java:48: warning: MethodRepository is internal proprietary API and may be removed in a future release
    private MethodRepository getGenericInfo() {
            ^
/tmp/rdisk/1263/src/reflection-no-reflection-master/common-lib/src/main/java/org/reflection_no_reflection/Constructor.java:22: warning: ConstructorRepository is internal proprietary API and may be removed in a future release
    private ConstructorRepository genericInfo;
            ^
/tmp/rdisk/1263/src/reflection-no-reflection-master/common-lib/src/main/java/org/reflection_no_reflection/Constructor.java:43: warning: GenericsFactory is internal proprietary API and may be removed in a future release
    private GenericsFactory getFactory() {
            ^
/tmp/rdisk/1263/src/reflection-no-reflection-master/common-lib/src/main/java/org/reflection_no_reflection/Constructor.java:49: warning: ConstructorRepository is internal proprietary API and may be removed in a future release
    private ConstructorRepository getGenericInfo() {
            ^
/tmp/rdisk/1263/src/reflection-no-reflection-master/common-lib/src/main/java/org/reflection_no_reflection/Constructor.java:54: warning: ConstructorRepository is internal proprietary API and may be removed in a future release
                ConstructorRepository.make(getSignature(),
                ^
Note: Some input files use unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
9 warnings

:common-lib:processResources UP-TO-DATE
:common-lib:classes
:common-lib:jar
:common-lib:assemble
:common-lib:build
:processor:compileJavaNote: /tmp/rdisk/1263/src/reflection-no-reflection-master/processor/src/main/java/org/reflection_no_reflection/processor/Processor.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.

:processor:processResources UP-TO-DATE
:processor:classes
:processor:jar
:generator:compileJavaNote: /tmp/rdisk/1263/src/reflection-no-reflection-master/generator/src/main/java/org/reflection_no_reflection/generator/annotation/AnnotationCreatorClassPoolVisitor.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.

:generator:processResources
:generator:classes
:generator:jar
:generator:assemble
:generator:build
:generator-integration-tests:compileJavawarning: [options] bootstrap class path not set in conjunction with -source 1.7

RNR Generator created.
Dumping all collected data: 

package org.reflection_no_reflection.generator.sample.gen;

import java.lang.Override;
import java.lang.String;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.reflection_no_reflection.Class;
import org.reflection_no_reflection.Constructor;
import org.reflection_no_reflection.Field;
import org.reflection_no_reflection.Method;
import org.reflection_no_reflection.generator.sample.AnnotationTestCase$$Reflector;
import org.reflection_no_reflection.generator.sample.Bar$$Reflector;
import org.reflection_no_reflection.generator.sample.ConstructorTestCase$$Reflector;
import org.reflection_no_reflection.generator.sample.FieldTestCase$$Reflector;
import org.reflection_no_reflection.generator.sample.Foo$$Reflector;
import org.reflection_no_reflection.generator.sample.MethodTestCase$$Reflector;
import org.reflection_no_reflection.generator.sample.Qurtz$$Reflector;
import org.reflection_no_reflection.runtime.Module;

public final class ModuleImpl implements Module {
	private Set<Class> classSet = new HashSet<>();

	private Map<String, Set<String>> mapAnnotationNameToNameOfClassesContainingAnnotation = new HashMap<>();

	public ModuleImpl() {
		Set<String> s0 = new HashSet();
		s0.add("org.reflection_no_reflection.generator.sample.Foo");
		s0.add("org.reflection_no_reflection.generator.sample.FieldTestCase");
		mapAnnotationNameToNameOfClassesContainingAnnotation.put("javax.inject.Inject",s0);

		Set<String> s1 = new HashSet();
		s1.add("org.reflection_no_reflection.generator.sample.AnnotationTestCase");
		mapAnnotationNameToNameOfClassesContainingAnnotation.put("java.lang.SuppressWarnings",s1);

	}

	@Override
	public Set<Class> getClassSet() {
		return classSet;
	}

	public Map<String, Set<String>> getMapAnnotationNameToNameOfClassesContainingAnnotation() {
		return mapAnnotationNameToNameOfClassesContainingAnnotation;
	}

	public Class loadClass(String className) {
		switch(className) {
			case "java.util.ListIterator": {
				Class c = Class.forNameSafe("java.util.ListIterator", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "org.reflection_no_reflection.generator.sample.Bar": {
				Class c = Class.forNameSafe("org.reflection_no_reflection.generator.sample.Bar", true);
				classSet.add(c);
				c.setSuperclass(Class.forNameSafe("java.lang.Object"));
				Class[] interfaces = new Class[0];
				int indexInterface = 0;
				c.setInterfaces(interfaces);
				 {
					Class[] paramTypeTab = new Class[0];
					Class[] exceptionTypeTab = new Class[0];
					Constructor co = new Constructor(c,paramTypeTab,exceptionTypeTab, 0);
					c.addConstructor(co);
					co.setIsVarArgs(false);
				} ;
				c.setReflector(new Bar$$Reflector());
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "java.io.ObjectInputStream": {
				Class c = Class.forNameSafe("java.io.ObjectInputStream", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "java.util.AbstractList": {
				Class c = Class.forNameSafe("java.util.AbstractList", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "org.reflection_no_reflection.generator.sample.Qurtz": {
				Class c = Class.forNameSafe("org.reflection_no_reflection.generator.sample.Qurtz", true);
				classSet.add(c);
				c.setReflector(new Qurtz$$Reflector());
				c.setModifiers(0);
				c.setIsInterface(true);
				return c;
			}
			case "java.util.function.UnaryOperator": {
				Class c = Class.forNameSafe("java.util.function.UnaryOperator", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(true);
				return c;
			}
			case "java.lang.String[]": {
				Class c = Class.forNameSafe("java.lang.String[]", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "java.util.Locale": {
				Class c = Class.forNameSafe("java.util.Locale", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "java.util.ArrayList.ListItr": {
				Class c = Class.forNameSafe("java.util.ArrayList.ListItr", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "java.util.ArrayList.Itr": {
				Class c = Class.forNameSafe("java.util.ArrayList.Itr", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "org.reflection_no_reflection.generator.sample.FieldTestCase": {
				Class c = Class.forNameSafe("org.reflection_no_reflection.generator.sample.FieldTestCase", true);
				classSet.add(c);
				 {
					Field f = new Field("a",Class.forNameSafe("java.lang.String"),c,1,null);
					c.addField(f);
					List annotationImplTab = new ArrayList(1);
					 {
						Class a = Class.forNameSafe("javax.inject.Inject");
						a.setModifiers(8192);
						classSet.add(a);
						Inject$$Impl aImpl = new Inject$$Impl();
						annotationImplTab.add(aImpl);
					}
					f.setAnnotationImplList(annotationImplTab);
				}
				 {
					Field f = new Field("foo",Class.forNameSafe("org.reflection_no_reflection.generator.sample.Foo"),c,1,null);
					c.addField(f);
					List annotationImplTab = new ArrayList(1);
					 {
						Class a = Class.forNameSafe("javax.inject.Inject");
						a.setModifiers(8192);
						classSet.add(a);
						Inject$$Impl aImpl = new Inject$$Impl();
						annotationImplTab.add(aImpl);
					}
					f.setAnnotationImplList(annotationImplTab);
				}
				 {
					Field f = new Field("c",Class.forNameSafe("byte"),c,1,null);
					c.addField(f);
					List annotationImplTab = new ArrayList(1);
					 {
						Class a = Class.forNameSafe("javax.inject.Inject");
						a.setModifiers(8192);
						classSet.add(a);
						Inject$$Impl aImpl = new Inject$$Impl();
						annotationImplTab.add(aImpl);
					}
					f.setAnnotationImplList(annotationImplTab);
				}
				 {
					Field f = new Field("d",Class.forNameSafe("short"),c,1,null);
					c.addField(f);
					List annotationImplTab = new ArrayList(1);
					 {
						Class a = Class.forNameSafe("javax.inject.Inject");
						a.setModifiers(8192);
						classSet.add(a);
						Inject$$Impl aImpl = new Inject$$Impl();
						annotationImplTab.add(aImpl);
					}
					f.setAnnotationImplList(annotationImplTab);
				}
				 {
					Field f = new Field("e",Class.forNameSafe("int"),c,1,null);
					c.addField(f);
					List annotationImplTab = new ArrayList(1);
					 {
						Class a = Class.forNameSafe("javax.inject.Inject");
						a.setModifiers(8192);
						classSet.add(a);
						Inject$$Impl aImpl = new Inject$$Impl();
						annotationImplTab.add(aImpl);
					}
					f.setAnnotationImplList(annotationImplTab);
				}
				 {
					Field f = new Field("f",Class.forNameSafe("long"),c,1,null);
					c.addField(f);
					List annotationImplTab = new ArrayList(1);
					 {
						Class a = Class.forNameSafe("javax.inject.Inject");
						a.setModifiers(8192);
						classSet.add(a);
						Inject$$Impl aImpl = new Inject$$Impl();
						annotationImplTab.add(aImpl);
					}
					f.setAnnotationImplList(annotationImplTab);
				}
				 {
					Field f = new Field("g",Class.forNameSafe("float"),c,1,null);
					c.addField(f);
					List annotationImplTab = new ArrayList(1);
					 {
						Class a = Class.forNameSafe("javax.inject.Inject");
						a.setModifiers(8192);
						classSet.add(a);
						Inject$$Impl aImpl = new Inject$$Impl();
						annotationImplTab.add(aImpl);
					}
					f.setAnnotationImplList(annotationImplTab);
				}
				 {
					Field f = new Field("h",Class.forNameSafe("double"),c,1,null);
					c.addField(f);
					List annotationImplTab = new ArrayList(1);
					 {
						Class a = Class.forNameSafe("javax.inject.Inject");
						a.setModifiers(8192);
						classSet.add(a);
						Inject$$Impl aImpl = new Inject$$Impl();
						annotationImplTab.add(aImpl);
					}
					f.setAnnotationImplList(annotationImplTab);
				}
				 {
					Field f = new Field("i",Class.forNameSafe("char"),c,1,null);
					c.addField(f);
					List annotationImplTab = new ArrayList(1);
					 {
						Class a = Class.forNameSafe("javax.inject.Inject");
						a.setModifiers(8192);
						classSet.add(a);
						Inject$$Impl aImpl = new Inject$$Impl();
						annotationImplTab.add(aImpl);
					}
					f.setAnnotationImplList(annotationImplTab);
				}
				 {
					Field f = new Field("j",Class.forNameSafe("boolean"),c,1,null);
					c.addField(f);
					List annotationImplTab = new ArrayList(1);
					 {
						Class a = Class.forNameSafe("javax.inject.Inject");
						a.setModifiers(8192);
						classSet.add(a);
						Inject$$Impl aImpl = new Inject$$Impl();
						annotationImplTab.add(aImpl);
					}
					f.setAnnotationImplList(annotationImplTab);
				}
				 {
					Field f = new Field("k",Class.forNameSafe("java.lang.String[]"),c,1,null);
					c.addField(f);
					List annotationImplTab = new ArrayList(1);
					 {
						Class a = Class.forNameSafe("javax.inject.Inject");
						a.setModifiers(8192);
						classSet.add(a);
						Inject$$Impl aImpl = new Inject$$Impl();
						annotationImplTab.add(aImpl);
					}
					f.setAnnotationImplList(annotationImplTab);
				}
				c.setReflector(new FieldTestCase$$Reflector());
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "java.io.ObjectStreamField": {
				Class c = Class.forNameSafe("java.io.ObjectStreamField", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "java.lang.Cloneable": {
				Class c = Class.forNameSafe("java.lang.Cloneable", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(true);
				return c;
			}
			case "java.lang.CharSequence": {
				Class c = Class.forNameSafe("java.lang.CharSequence", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(true);
				return c;
			}
			case "java.lang.String.CaseInsensitiveComparator": {
				Class c = Class.forNameSafe("java.lang.String.CaseInsensitiveComparator", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "java.lang.SuppressWarnings": {
				Class c = Class.forNameSafe("java.lang.SuppressWarnings", true);
				classSet.add(c);
				Class[] interfaces = new Class[1];
				int indexInterface = 0;
				interfaces[indexInterface++] = Class.forNameSafe("java.lang.annotation.Annotation");
				c.setInterfaces(interfaces);
				 {
					Class[] paramTypeTab = new Class[0];
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"value",paramTypeTab,Class.forNameSafe("java.lang.String[]"),exceptionTypeTab, 1025);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				c.setModifiers(8192);
				c.setIsInterface(true);
				return c;
			}
			case "java.util.function.Predicate": {
				Class c = Class.forNameSafe("java.util.function.Predicate", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(true);
				return c;
			}
			case "java.util.Collection": {
				Class c = Class.forNameSafe("java.util.Collection", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(true);
				return c;
			}
			case "java.lang.Exception": {
				Class c = Class.forNameSafe("java.lang.Exception", true);
				classSet.add(c);
				c.setSuperclass(Class.forNameSafe("java.lang.Throwable"));
				Class[] interfaces = new Class[0];
				int indexInterface = 0;
				c.setInterfaces(interfaces);
				 {
					Class[] paramTypeTab = new Class[0];
					Class[] exceptionTypeTab = new Class[0];
					Constructor co = new Constructor(c,paramTypeTab,exceptionTypeTab, 1);
					c.addConstructor(co);
					co.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("java.lang.String");
					Class[] exceptionTypeTab = new Class[0];
					Constructor co = new Constructor(c,paramTypeTab,exceptionTypeTab, 1);
					c.addConstructor(co);
					co.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[2];
					paramTypeTab[0] = Class.forNameSafe("java.lang.String");
					paramTypeTab[1] = Class.forNameSafe("java.lang.Throwable");
					Class[] exceptionTypeTab = new Class[0];
					Constructor co = new Constructor(c,paramTypeTab,exceptionTypeTab, 1);
					c.addConstructor(co);
					co.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("java.lang.Throwable");
					Class[] exceptionTypeTab = new Class[0];
					Constructor co = new Constructor(c,paramTypeTab,exceptionTypeTab, 1);
					c.addConstructor(co);
					co.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[4];
					paramTypeTab[0] = Class.forNameSafe("java.lang.String");
					paramTypeTab[1] = Class.forNameSafe("java.lang.Throwable");
					paramTypeTab[2] = Class.forNameSafe("boolean");
					paramTypeTab[3] = Class.forNameSafe("boolean");
					Class[] exceptionTypeTab = new Class[0];
					Constructor co = new Constructor(c,paramTypeTab,exceptionTypeTab, 4);
					c.addConstructor(co);
					co.setIsVarArgs(false);
				} ;
				 {
					Field f = new Field("serialVersionUID",Class.forNameSafe("long"),c,24,null);
					c.addField(f);
				}
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "org.reflection_no_reflection.generator.sample.ConstructorTestCase": {
				Class c = Class.forNameSafe("org.reflection_no_reflection.generator.sample.ConstructorTestCase", true);
				classSet.add(c);
				 {
					Class[] paramTypeTab = new Class[0];
					Class[] exceptionTypeTab = new Class[0];
					Constructor co = new Constructor(c,paramTypeTab,exceptionTypeTab, 1);
					c.addConstructor(co);
					List annotationImplTab = new ArrayList(1);
					 {
						Class a = Class.forNameSafe("javax.inject.Inject");
						a.setModifiers(8192);
						classSet.add(a);
						Inject$$Impl aImpl = new Inject$$Impl();
						annotationImplTab.add(aImpl);
					}
					co.setAnnotationImplList(annotationImplTab);
					co.setIsVarArgs(false);
				} ;
				c.setReflector(new ConstructorTestCase$$Reflector());
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "java.io.Serializable": {
				Class c = Class.forNameSafe("java.io.Serializable", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(true);
				return c;
			}
			case "java.util.List": {
				Class c = Class.forNameSafe("java.util.List", true);
				classSet.add(c);
				Class[] interfaces = new Class[1];
				int indexInterface = 0;
				interfaces[indexInterface++] = Class.forNameSafe("java.util.Collection");
				c.setInterfaces(interfaces);
				c.setModifiers(0);
				c.setIsInterface(true);
				return c;
			}
			case "java.io.ObjectStreamField[]": {
				Class c = Class.forNameSafe("java.io.ObjectStreamField[]", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "java.lang.annotation.Annotation": {
				Class c = Class.forNameSafe("java.lang.annotation.Annotation", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(true);
				return c;
			}
			case "java.lang.StringBuilder": {
				Class c = Class.forNameSafe("java.lang.StringBuilder", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "java.io.UnsupportedEncodingException": {
				Class c = Class.forNameSafe("java.io.UnsupportedEncodingException", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "java.util.Spliterator": {
				Class c = Class.forNameSafe("java.util.Spliterator", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "java.lang.Throwable": {
				Class c = Class.forNameSafe("java.lang.Throwable", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "java.lang.Object[]": {
				Class c = Class.forNameSafe("java.lang.Object[]", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "org.reflection_no_reflection.generator.sample.AnnotationTestCase": {
				Class c = Class.forNameSafe("org.reflection_no_reflection.generator.sample.AnnotationTestCase", true);
				classSet.add(c);
				 {
					Field f = new Field("a",Class.forNameSafe("java.lang.String"),c,1,null);
					c.addField(f);
					List annotationImplTab = new ArrayList(1);
					 {
						Class a = Class.forNameSafe("java.lang.SuppressWarnings");
						a.setModifiers(8192);
						classSet.add(a);
						SuppressWarnings$$Impl aImpl = new SuppressWarnings$$Impl();
						aImpl.setValue(new String[] {"unused"});
						annotationImplTab.add(aImpl);
					}
					f.setAnnotationImplList(annotationImplTab);
				}
				c.setReflector(new AnnotationTestCase$$Reflector());
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "java.lang.Iterable": {
				Class c = Class.forNameSafe("java.lang.Iterable", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(true);
				return c;
			}
			case "java.util.ArrayList": {
				Class c = Class.forNameSafe("java.util.ArrayList", true);
				classSet.add(c);
				c.setSuperclass(Class.forNameSafe("java.util.AbstractList"));
				Class[] interfaces = new Class[4];
				int indexInterface = 0;
				interfaces[indexInterface++] = Class.forNameSafe("java.util.List");
				interfaces[indexInterface++] = Class.forNameSafe("java.util.RandomAccess");
				interfaces[indexInterface++] = Class.forNameSafe("java.lang.Cloneable");
				interfaces[indexInterface++] = Class.forNameSafe("java.io.Serializable");
				c.setInterfaces(interfaces);
				 {
					Field f = new Field("serialVersionUID",Class.forNameSafe("long"),c,26,null);
					c.addField(f);
				}
				 {
					Field f = new Field("DEFAULT_CAPACITY",Class.forNameSafe("int"),c,26,null);
					c.addField(f);
				}
				 {
					Field f = new Field("EMPTY_ELEMENTDATA",Class.forNameSafe("java.lang.Object[]"),c,26,null);
					c.addField(f);
				}
				 {
					Field f = new Field("DEFAULTCAPACITY_EMPTY_ELEMENTDATA",Class.forNameSafe("java.lang.Object[]"),c,26,null);
					c.addField(f);
				}
				 {
					Field f = new Field("elementData",Class.forNameSafe("java.lang.Object[]"),c,0,null);
					c.addField(f);
				}
				 {
					Field f = new Field("size",Class.forNameSafe("int"),c,2,null);
					c.addField(f);
				}
				 {
					Field f = new Field("MAX_ARRAY_SIZE",Class.forNameSafe("int"),c,26,null);
					c.addField(f);
				}
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "javax.inject.Inject": {
				Class c = Class.forNameSafe("javax.inject.Inject", true);
				classSet.add(c);
				Class[] interfaces = new Class[1];
				int indexInterface = 0;
				interfaces[indexInterface++] = Class.forNameSafe("java.lang.annotation.Annotation");
				c.setInterfaces(interfaces);
				c.setModifiers(8192);
				c.setIsInterface(true);
				return c;
			}
			case "java.util.RandomAccess": {
				Class c = Class.forNameSafe("java.util.RandomAccess", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(true);
				return c;
			}
			case "org.reflection_no_reflection.generator.sample.Foo": {
				Class c = Class.forNameSafe("org.reflection_no_reflection.generator.sample.Foo", true);
				classSet.add(c);
				c.setSuperclass(Class.forNameSafe("org.reflection_no_reflection.generator.sample.Bar"));
				Class[] interfaces = new Class[1];
				int indexInterface = 0;
				interfaces[indexInterface++] = Class.forNameSafe("org.reflection_no_reflection.generator.sample.Qurtz");
				c.setInterfaces(interfaces);
				 {
					Class[] paramTypeTab = new Class[0];
					Class[] exceptionTypeTab = new Class[0];
					Constructor co = new Constructor(c,paramTypeTab,exceptionTypeTab, 1);
					c.addConstructor(co);
					co.setIsVarArgs(false);
				} ;
				 {
					Field f = new Field("foo",Class.forNameSafe("org.reflection_no_reflection.generator.sample.Foo"),c,0,null);
					c.addField(f);
					List annotationImplTab = new ArrayList(1);
					 {
						Class a = Class.forNameSafe("javax.inject.Inject");
						a.setModifiers(8192);
						classSet.add(a);
						Inject$$Impl aImpl = new Inject$$Impl();
						annotationImplTab.add(aImpl);
					}
					f.setAnnotationImplList(annotationImplTab);
				}
				 {
					Field f = new Field("bar",Class.forNameSafe("org.reflection_no_reflection.generator.sample.Bar"),c,0,null);
					c.addField(f);
					List annotationImplTab = new ArrayList(1);
					 {
						Class a = Class.forNameSafe("javax.inject.Inject");
						a.setModifiers(8192);
						classSet.add(a);
						Inject$$Impl aImpl = new Inject$$Impl();
						annotationImplTab.add(aImpl);
					}
					f.setAnnotationImplList(annotationImplTab);
				}
				c.setReflector(new Foo$$Reflector());
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "java.nio.charset.Charset": {
				Class c = Class.forNameSafe("java.nio.charset.Charset", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "java.lang.StringBuffer": {
				Class c = Class.forNameSafe("java.lang.StringBuffer", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "org.reflection_no_reflection.generator.sample.MethodTestCase": {
				Class c = Class.forNameSafe("org.reflection_no_reflection.generator.sample.MethodTestCase", true);
				classSet.add(c);
				 {
					Class[] paramTypeTab = new Class[0];
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"simpleMethod",paramTypeTab,Class.forNameSafe("void"),exceptionTypeTab, 1);
					c.addMethod(m);
					List annotationImplTab = new ArrayList(1);
					 {
						Class a = Class.forNameSafe("javax.inject.Inject");
						a.setModifiers(8192);
						classSet.add(a);
						Inject$$Impl aImpl = new Inject$$Impl();
						annotationImplTab.add(aImpl);
					}
					m.setAnnotationImplList(annotationImplTab);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[0];
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"methodReturningString",paramTypeTab,Class.forNameSafe("java.lang.String"),exceptionTypeTab, 1);
					c.addMethod(m);
					List annotationImplTab = new ArrayList(1);
					 {
						Class a = Class.forNameSafe("javax.inject.Inject");
						a.setModifiers(8192);
						classSet.add(a);
						Inject$$Impl aImpl = new Inject$$Impl();
						annotationImplTab.add(aImpl);
					}
					m.setAnnotationImplList(annotationImplTab);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[0];
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"methodReturningInt",paramTypeTab,Class.forNameSafe("int"),exceptionTypeTab, 1);
					c.addMethod(m);
					List annotationImplTab = new ArrayList(1);
					 {
						Class a = Class.forNameSafe("javax.inject.Inject");
						a.setModifiers(8192);
						classSet.add(a);
						Inject$$Impl aImpl = new Inject$$Impl();
						annotationImplTab.add(aImpl);
					}
					m.setAnnotationImplList(annotationImplTab);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[0];
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"methodReturningIntArray",paramTypeTab,Class.forNameSafe("int[]"),exceptionTypeTab, 1);
					c.addMethod(m);
					List annotationImplTab = new ArrayList(1);
					 {
						Class a = Class.forNameSafe("javax.inject.Inject");
						a.setModifiers(8192);
						classSet.add(a);
						Inject$$Impl aImpl = new Inject$$Impl();
						annotationImplTab.add(aImpl);
					}
					m.setAnnotationImplList(annotationImplTab);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"methodWithPrimitiveParam",paramTypeTab,Class.forNameSafe("void"),exceptionTypeTab, 1);
					c.addMethod(m);
					List annotationImplTab = new ArrayList(1);
					 {
						Class a = Class.forNameSafe("javax.inject.Inject");
						a.setModifiers(8192);
						classSet.add(a);
						Inject$$Impl aImpl = new Inject$$Impl();
						annotationImplTab.add(aImpl);
					}
					m.setAnnotationImplList(annotationImplTab);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("java.lang.String");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"methodWithObjectParam",paramTypeTab,Class.forNameSafe("void"),exceptionTypeTab, 1);
					c.addMethod(m);
					List annotationImplTab = new ArrayList(1);
					 {
						Class a = Class.forNameSafe("javax.inject.Inject");
						a.setModifiers(8192);
						classSet.add(a);
						Inject$$Impl aImpl = new Inject$$Impl();
						annotationImplTab.add(aImpl);
					}
					m.setAnnotationImplList(annotationImplTab);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[2];
					paramTypeTab[0] = Class.forNameSafe("java.lang.String[]");
					paramTypeTab[1] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"methodWithArrayNotLastParam",paramTypeTab,Class.forNameSafe("void"),exceptionTypeTab, 1);
					c.addMethod(m);
					List annotationImplTab = new ArrayList(1);
					 {
						Class a = Class.forNameSafe("javax.inject.Inject");
						a.setModifiers(8192);
						classSet.add(a);
						Inject$$Impl aImpl = new Inject$$Impl();
						annotationImplTab.add(aImpl);
					}
					m.setAnnotationImplList(annotationImplTab);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("java.lang.String[]");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"methodWithArrayLastParam",paramTypeTab,Class.forNameSafe("void"),exceptionTypeTab, 1);
					c.addMethod(m);
					List annotationImplTab = new ArrayList(1);
					 {
						Class a = Class.forNameSafe("javax.inject.Inject");
						a.setModifiers(8192);
						classSet.add(a);
						Inject$$Impl aImpl = new Inject$$Impl();
						annotationImplTab.add(aImpl);
					}
					m.setAnnotationImplList(annotationImplTab);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("java.lang.String[]");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"methodWithVarArgsParam",paramTypeTab,Class.forNameSafe("void"),exceptionTypeTab, 1);
					c.addMethod(m);
					List annotationImplTab = new ArrayList(1);
					 {
						Class a = Class.forNameSafe("javax.inject.Inject");
						a.setModifiers(8192);
						classSet.add(a);
						Inject$$Impl aImpl = new Inject$$Impl();
						annotationImplTab.add(aImpl);
					}
					m.setAnnotationImplList(annotationImplTab);
					m.setIsVarArgs(true);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("java.util.ArrayList");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"methodWithGenericsParam",paramTypeTab,Class.forNameSafe("void"),exceptionTypeTab, 1);
					c.addMethod(m);
					List annotationImplTab = new ArrayList(1);
					 {
						Class a = Class.forNameSafe("javax.inject.Inject");
						a.setModifiers(8192);
						classSet.add(a);
						Inject$$Impl aImpl = new Inject$$Impl();
						annotationImplTab.add(aImpl);
					}
					m.setAnnotationImplList(annotationImplTab);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("java.util.List");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"methodWithInterfaceParam",paramTypeTab,Class.forNameSafe("void"),exceptionTypeTab, 1);
					c.addMethod(m);
					List annotationImplTab = new ArrayList(1);
					 {
						Class a = Class.forNameSafe("javax.inject.Inject");
						a.setModifiers(8192);
						classSet.add(a);
						Inject$$Impl aImpl = new Inject$$Impl();
						annotationImplTab.add(aImpl);
					}
					m.setAnnotationImplList(annotationImplTab);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[0];
					Class[] exceptionTypeTab = new Class[1];
					exceptionTypeTab[0] = Class.forNameSafe("java.lang.Exception");
					Method m = new Method(c,"methodWithException",paramTypeTab,Class.forNameSafe("void"),exceptionTypeTab, 1);
					c.addMethod(m);
					List annotationImplTab = new ArrayList(1);
					 {
						Class a = Class.forNameSafe("javax.inject.Inject");
						a.setModifiers(8192);
						classSet.add(a);
						Inject$$Impl aImpl = new Inject$$Impl();
						annotationImplTab.add(aImpl);
					}
					m.setAnnotationImplList(annotationImplTab);
					m.setIsVarArgs(false);
				} ;
				c.setReflector(new MethodTestCase$$Reflector());
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "java.lang.AbstractStringBuilder": {
				Class c = Class.forNameSafe("java.lang.AbstractStringBuilder", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "java.io.ObjectOutputStream": {
				Class c = Class.forNameSafe("java.io.ObjectOutputStream", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "java.lang.String": {
				Class c = Class.forNameSafe("java.lang.String", true);
				classSet.add(c);
				c.setSuperclass(Class.forNameSafe("java.lang.Object"));
				Class[] interfaces = new Class[3];
				int indexInterface = 0;
				interfaces[indexInterface++] = Class.forNameSafe("java.io.Serializable");
				interfaces[indexInterface++] = Class.forNameSafe("java.lang.Comparable");
				interfaces[indexInterface++] = Class.forNameSafe("java.lang.CharSequence");
				c.setInterfaces(interfaces);
				 {
					Class[] paramTypeTab = new Class[0];
					Class[] exceptionTypeTab = new Class[0];
					Constructor co = new Constructor(c,paramTypeTab,exceptionTypeTab, 1);
					c.addConstructor(co);
					co.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("java.lang.String");
					Class[] exceptionTypeTab = new Class[0];
					Constructor co = new Constructor(c,paramTypeTab,exceptionTypeTab, 1);
					c.addConstructor(co);
					co.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("char[]");
					Class[] exceptionTypeTab = new Class[0];
					Constructor co = new Constructor(c,paramTypeTab,exceptionTypeTab, 1);
					c.addConstructor(co);
					co.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[3];
					paramTypeTab[0] = Class.forNameSafe("char[]");
					paramTypeTab[1] = Class.forNameSafe("int");
					paramTypeTab[2] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Constructor co = new Constructor(c,paramTypeTab,exceptionTypeTab, 1);
					c.addConstructor(co);
					co.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[3];
					paramTypeTab[0] = Class.forNameSafe("int[]");
					paramTypeTab[1] = Class.forNameSafe("int");
					paramTypeTab[2] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Constructor co = new Constructor(c,paramTypeTab,exceptionTypeTab, 1);
					c.addConstructor(co);
					co.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[4];
					paramTypeTab[0] = Class.forNameSafe("byte[]");
					paramTypeTab[1] = Class.forNameSafe("int");
					paramTypeTab[2] = Class.forNameSafe("int");
					paramTypeTab[3] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Constructor co = new Constructor(c,paramTypeTab,exceptionTypeTab, 1);
					c.addConstructor(co);
					List annotationImplTab = new ArrayList(1);
					 {
						Class a = Class.forNameSafe("java.lang.Deprecated");
						a.setModifiers(8192);
						classSet.add(a);
						Deprecated$$Impl aImpl = new Deprecated$$Impl();
						annotationImplTab.add(aImpl);
					}
					co.setAnnotationImplList(annotationImplTab);
					co.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[2];
					paramTypeTab[0] = Class.forNameSafe("byte[]");
					paramTypeTab[1] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Constructor co = new Constructor(c,paramTypeTab,exceptionTypeTab, 1);
					c.addConstructor(co);
					List annotationImplTab = new ArrayList(1);
					 {
						Class a = Class.forNameSafe("java.lang.Deprecated");
						a.setModifiers(8192);
						classSet.add(a);
						Deprecated$$Impl aImpl = new Deprecated$$Impl();
						annotationImplTab.add(aImpl);
					}
					co.setAnnotationImplList(annotationImplTab);
					co.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[4];
					paramTypeTab[0] = Class.forNameSafe("byte[]");
					paramTypeTab[1] = Class.forNameSafe("int");
					paramTypeTab[2] = Class.forNameSafe("int");
					paramTypeTab[3] = Class.forNameSafe("java.lang.String");
					Class[] exceptionTypeTab = new Class[1];
					exceptionTypeTab[0] = Class.forNameSafe("java.io.UnsupportedEncodingException");
					Constructor co = new Constructor(c,paramTypeTab,exceptionTypeTab, 1);
					c.addConstructor(co);
					co.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[4];
					paramTypeTab[0] = Class.forNameSafe("byte[]");
					paramTypeTab[1] = Class.forNameSafe("int");
					paramTypeTab[2] = Class.forNameSafe("int");
					paramTypeTab[3] = Class.forNameSafe("java.nio.charset.Charset");
					Class[] exceptionTypeTab = new Class[0];
					Constructor co = new Constructor(c,paramTypeTab,exceptionTypeTab, 1);
					c.addConstructor(co);
					co.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[2];
					paramTypeTab[0] = Class.forNameSafe("byte[]");
					paramTypeTab[1] = Class.forNameSafe("java.lang.String");
					Class[] exceptionTypeTab = new Class[1];
					exceptionTypeTab[0] = Class.forNameSafe("java.io.UnsupportedEncodingException");
					Constructor co = new Constructor(c,paramTypeTab,exceptionTypeTab, 1);
					c.addConstructor(co);
					co.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[2];
					paramTypeTab[0] = Class.forNameSafe("byte[]");
					paramTypeTab[1] = Class.forNameSafe("java.nio.charset.Charset");
					Class[] exceptionTypeTab = new Class[0];
					Constructor co = new Constructor(c,paramTypeTab,exceptionTypeTab, 1);
					c.addConstructor(co);
					co.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[3];
					paramTypeTab[0] = Class.forNameSafe("byte[]");
					paramTypeTab[1] = Class.forNameSafe("int");
					paramTypeTab[2] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Constructor co = new Constructor(c,paramTypeTab,exceptionTypeTab, 1);
					c.addConstructor(co);
					co.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("byte[]");
					Class[] exceptionTypeTab = new Class[0];
					Constructor co = new Constructor(c,paramTypeTab,exceptionTypeTab, 1);
					c.addConstructor(co);
					co.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("java.lang.StringBuffer");
					Class[] exceptionTypeTab = new Class[0];
					Constructor co = new Constructor(c,paramTypeTab,exceptionTypeTab, 1);
					c.addConstructor(co);
					co.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("java.lang.StringBuilder");
					Class[] exceptionTypeTab = new Class[0];
					Constructor co = new Constructor(c,paramTypeTab,exceptionTypeTab, 1);
					c.addConstructor(co);
					co.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[2];
					paramTypeTab[0] = Class.forNameSafe("char[]");
					paramTypeTab[1] = Class.forNameSafe("boolean");
					Class[] exceptionTypeTab = new Class[0];
					Constructor co = new Constructor(c,paramTypeTab,exceptionTypeTab, 0);
					c.addConstructor(co);
					co.setIsVarArgs(false);
				} ;
				 {
					Field f = new Field("value",Class.forNameSafe("char[]"),c,18,null);
					c.addField(f);
				}
				 {
					Field f = new Field("hash",Class.forNameSafe("int"),c,2,null);
					c.addField(f);
				}
				 {
					Field f = new Field("serialVersionUID",Class.forNameSafe("long"),c,26,null);
					c.addField(f);
				}
				 {
					Field f = new Field("serialPersistentFields",Class.forNameSafe("java.io.ObjectStreamField[]"),c,26,null);
					c.addField(f);
				}
				 {
					Field f = new Field("CASE_INSENSITIVE_ORDER",Class.forNameSafe("java.util.Comparator"),c,25,null);
					c.addField(f);
				}
				 {
					Class[] paramTypeTab = new Class[3];
					paramTypeTab[0] = Class.forNameSafe("byte[]");
					paramTypeTab[1] = Class.forNameSafe("int");
					paramTypeTab[2] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"checkBounds",paramTypeTab,Class.forNameSafe("void"),exceptionTypeTab, 10);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[0];
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"length",paramTypeTab,Class.forNameSafe("int"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[0];
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"isEmpty",paramTypeTab,Class.forNameSafe("boolean"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"charAt",paramTypeTab,Class.forNameSafe("char"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"codePointAt",paramTypeTab,Class.forNameSafe("int"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"codePointBefore",paramTypeTab,Class.forNameSafe("int"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[2];
					paramTypeTab[0] = Class.forNameSafe("int");
					paramTypeTab[1] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"codePointCount",paramTypeTab,Class.forNameSafe("int"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[2];
					paramTypeTab[0] = Class.forNameSafe("int");
					paramTypeTab[1] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"offsetByCodePoints",paramTypeTab,Class.forNameSafe("int"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[2];
					paramTypeTab[0] = Class.forNameSafe("char[]");
					paramTypeTab[1] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"getChars",paramTypeTab,Class.forNameSafe("void"),exceptionTypeTab, 0);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[4];
					paramTypeTab[0] = Class.forNameSafe("int");
					paramTypeTab[1] = Class.forNameSafe("int");
					paramTypeTab[2] = Class.forNameSafe("char[]");
					paramTypeTab[3] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"getChars",paramTypeTab,Class.forNameSafe("void"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[4];
					paramTypeTab[0] = Class.forNameSafe("int");
					paramTypeTab[1] = Class.forNameSafe("int");
					paramTypeTab[2] = Class.forNameSafe("byte[]");
					paramTypeTab[3] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"getBytes",paramTypeTab,Class.forNameSafe("void"),exceptionTypeTab, 1);
					c.addMethod(m);
					List annotationImplTab = new ArrayList(1);
					 {
						Class a = Class.forNameSafe("java.lang.Deprecated");
						a.setModifiers(8192);
						classSet.add(a);
						Deprecated$$Impl aImpl = new Deprecated$$Impl();
						annotationImplTab.add(aImpl);
					}
					m.setAnnotationImplList(annotationImplTab);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("java.lang.String");
					Class[] exceptionTypeTab = new Class[1];
					exceptionTypeTab[0] = Class.forNameSafe("java.io.UnsupportedEncodingException");
					Method m = new Method(c,"getBytes",paramTypeTab,Class.forNameSafe("byte[]"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("java.nio.charset.Charset");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"getBytes",paramTypeTab,Class.forNameSafe("byte[]"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[0];
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"getBytes",paramTypeTab,Class.forNameSafe("byte[]"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("java.lang.Object");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"equals",paramTypeTab,Class.forNameSafe("boolean"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("java.lang.StringBuffer");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"contentEquals",paramTypeTab,Class.forNameSafe("boolean"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("java.lang.AbstractStringBuilder");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"nonSyncContentEquals",paramTypeTab,Class.forNameSafe("boolean"),exceptionTypeTab, 2);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("java.lang.CharSequence");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"contentEquals",paramTypeTab,Class.forNameSafe("boolean"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("java.lang.String");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"equalsIgnoreCase",paramTypeTab,Class.forNameSafe("boolean"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("java.lang.String");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"compareTo",paramTypeTab,Class.forNameSafe("int"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("java.lang.String");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"compareToIgnoreCase",paramTypeTab,Class.forNameSafe("int"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[4];
					paramTypeTab[0] = Class.forNameSafe("int");
					paramTypeTab[1] = Class.forNameSafe("java.lang.String");
					paramTypeTab[2] = Class.forNameSafe("int");
					paramTypeTab[3] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"regionMatches",paramTypeTab,Class.forNameSafe("boolean"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[5];
					paramTypeTab[0] = Class.forNameSafe("boolean");
					paramTypeTab[1] = Class.forNameSafe("int");
					paramTypeTab[2] = Class.forNameSafe("java.lang.String");
					paramTypeTab[3] = Class.forNameSafe("int");
					paramTypeTab[4] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"regionMatches",paramTypeTab,Class.forNameSafe("boolean"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[2];
					paramTypeTab[0] = Class.forNameSafe("java.lang.String");
					paramTypeTab[1] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"startsWith",paramTypeTab,Class.forNameSafe("boolean"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("java.lang.String");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"startsWith",paramTypeTab,Class.forNameSafe("boolean"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("java.lang.String");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"endsWith",paramTypeTab,Class.forNameSafe("boolean"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[0];
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"hashCode",paramTypeTab,Class.forNameSafe("int"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"indexOf",paramTypeTab,Class.forNameSafe("int"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[2];
					paramTypeTab[0] = Class.forNameSafe("int");
					paramTypeTab[1] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"indexOf",paramTypeTab,Class.forNameSafe("int"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[2];
					paramTypeTab[0] = Class.forNameSafe("int");
					paramTypeTab[1] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"indexOfSupplementary",paramTypeTab,Class.forNameSafe("int"),exceptionTypeTab, 2);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"lastIndexOf",paramTypeTab,Class.forNameSafe("int"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[2];
					paramTypeTab[0] = Class.forNameSafe("int");
					paramTypeTab[1] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"lastIndexOf",paramTypeTab,Class.forNameSafe("int"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[2];
					paramTypeTab[0] = Class.forNameSafe("int");
					paramTypeTab[1] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"lastIndexOfSupplementary",paramTypeTab,Class.forNameSafe("int"),exceptionTypeTab, 2);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("java.lang.String");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"indexOf",paramTypeTab,Class.forNameSafe("int"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[2];
					paramTypeTab[0] = Class.forNameSafe("java.lang.String");
					paramTypeTab[1] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"indexOf",paramTypeTab,Class.forNameSafe("int"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[5];
					paramTypeTab[0] = Class.forNameSafe("char[]");
					paramTypeTab[1] = Class.forNameSafe("int");
					paramTypeTab[2] = Class.forNameSafe("int");
					paramTypeTab[3] = Class.forNameSafe("java.lang.String");
					paramTypeTab[4] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"indexOf",paramTypeTab,Class.forNameSafe("int"),exceptionTypeTab, 8);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[7];
					paramTypeTab[0] = Class.forNameSafe("char[]");
					paramTypeTab[1] = Class.forNameSafe("int");
					paramTypeTab[2] = Class.forNameSafe("int");
					paramTypeTab[3] = Class.forNameSafe("char[]");
					paramTypeTab[4] = Class.forNameSafe("int");
					paramTypeTab[5] = Class.forNameSafe("int");
					paramTypeTab[6] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"indexOf",paramTypeTab,Class.forNameSafe("int"),exceptionTypeTab, 8);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("java.lang.String");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"lastIndexOf",paramTypeTab,Class.forNameSafe("int"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[2];
					paramTypeTab[0] = Class.forNameSafe("java.lang.String");
					paramTypeTab[1] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"lastIndexOf",paramTypeTab,Class.forNameSafe("int"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[5];
					paramTypeTab[0] = Class.forNameSafe("char[]");
					paramTypeTab[1] = Class.forNameSafe("int");
					paramTypeTab[2] = Class.forNameSafe("int");
					paramTypeTab[3] = Class.forNameSafe("java.lang.String");
					paramTypeTab[4] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"lastIndexOf",paramTypeTab,Class.forNameSafe("int"),exceptionTypeTab, 8);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[7];
					paramTypeTab[0] = Class.forNameSafe("char[]");
					paramTypeTab[1] = Class.forNameSafe("int");
					paramTypeTab[2] = Class.forNameSafe("int");
					paramTypeTab[3] = Class.forNameSafe("char[]");
					paramTypeTab[4] = Class.forNameSafe("int");
					paramTypeTab[5] = Class.forNameSafe("int");
					paramTypeTab[6] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"lastIndexOf",paramTypeTab,Class.forNameSafe("int"),exceptionTypeTab, 8);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"substring",paramTypeTab,Class.forNameSafe("java.lang.String"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[2];
					paramTypeTab[0] = Class.forNameSafe("int");
					paramTypeTab[1] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"substring",paramTypeTab,Class.forNameSafe("java.lang.String"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[2];
					paramTypeTab[0] = Class.forNameSafe("int");
					paramTypeTab[1] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"subSequence",paramTypeTab,Class.forNameSafe("java.lang.CharSequence"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("java.lang.String");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"concat",paramTypeTab,Class.forNameSafe("java.lang.String"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[2];
					paramTypeTab[0] = Class.forNameSafe("char");
					paramTypeTab[1] = Class.forNameSafe("char");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"replace",paramTypeTab,Class.forNameSafe("java.lang.String"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("java.lang.String");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"matches",paramTypeTab,Class.forNameSafe("boolean"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("java.lang.CharSequence");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"contains",paramTypeTab,Class.forNameSafe("boolean"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[2];
					paramTypeTab[0] = Class.forNameSafe("java.lang.String");
					paramTypeTab[1] = Class.forNameSafe("java.lang.String");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"replaceFirst",paramTypeTab,Class.forNameSafe("java.lang.String"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[2];
					paramTypeTab[0] = Class.forNameSafe("java.lang.String");
					paramTypeTab[1] = Class.forNameSafe("java.lang.String");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"replaceAll",paramTypeTab,Class.forNameSafe("java.lang.String"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[2];
					paramTypeTab[0] = Class.forNameSafe("java.lang.CharSequence");
					paramTypeTab[1] = Class.forNameSafe("java.lang.CharSequence");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"replace",paramTypeTab,Class.forNameSafe("java.lang.String"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[2];
					paramTypeTab[0] = Class.forNameSafe("java.lang.String");
					paramTypeTab[1] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"split",paramTypeTab,Class.forNameSafe("java.lang.String[]"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("java.lang.String");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"split",paramTypeTab,Class.forNameSafe("java.lang.String[]"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[2];
					paramTypeTab[0] = Class.forNameSafe("java.lang.CharSequence");
					paramTypeTab[1] = Class.forNameSafe("java.lang.CharSequence[]");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"join",paramTypeTab,Class.forNameSafe("java.lang.String"),exceptionTypeTab, 9);
					c.addMethod(m);
					m.setIsVarArgs(true);
				} ;
				 {
					Class[] paramTypeTab = new Class[2];
					paramTypeTab[0] = Class.forNameSafe("java.lang.CharSequence");
					paramTypeTab[1] = Class.forNameSafe("java.lang.Iterable");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"join",paramTypeTab,Class.forNameSafe("java.lang.String"),exceptionTypeTab, 9);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("java.util.Locale");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"toLowerCase",paramTypeTab,Class.forNameSafe("java.lang.String"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[0];
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"toLowerCase",paramTypeTab,Class.forNameSafe("java.lang.String"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("java.util.Locale");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"toUpperCase",paramTypeTab,Class.forNameSafe("java.lang.String"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[0];
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"toUpperCase",paramTypeTab,Class.forNameSafe("java.lang.String"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[0];
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"trim",paramTypeTab,Class.forNameSafe("java.lang.String"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[0];
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"toString",paramTypeTab,Class.forNameSafe("java.lang.String"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[0];
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"toCharArray",paramTypeTab,Class.forNameSafe("char[]"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[2];
					paramTypeTab[0] = Class.forNameSafe("java.lang.String");
					paramTypeTab[1] = Class.forNameSafe("java.lang.Object[]");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"format",paramTypeTab,Class.forNameSafe("java.lang.String"),exceptionTypeTab, 9);
					c.addMethod(m);
					m.setIsVarArgs(true);
				} ;
				 {
					Class[] paramTypeTab = new Class[3];
					paramTypeTab[0] = Class.forNameSafe("java.util.Locale");
					paramTypeTab[1] = Class.forNameSafe("java.lang.String");
					paramTypeTab[2] = Class.forNameSafe("java.lang.Object[]");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"format",paramTypeTab,Class.forNameSafe("java.lang.String"),exceptionTypeTab, 9);
					c.addMethod(m);
					m.setIsVarArgs(true);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("java.lang.Object");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"valueOf",paramTypeTab,Class.forNameSafe("java.lang.String"),exceptionTypeTab, 9);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("char[]");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"valueOf",paramTypeTab,Class.forNameSafe("java.lang.String"),exceptionTypeTab, 9);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[3];
					paramTypeTab[0] = Class.forNameSafe("char[]");
					paramTypeTab[1] = Class.forNameSafe("int");
					paramTypeTab[2] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"valueOf",paramTypeTab,Class.forNameSafe("java.lang.String"),exceptionTypeTab, 9);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[3];
					paramTypeTab[0] = Class.forNameSafe("char[]");
					paramTypeTab[1] = Class.forNameSafe("int");
					paramTypeTab[2] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"copyValueOf",paramTypeTab,Class.forNameSafe("java.lang.String"),exceptionTypeTab, 9);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("char[]");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"copyValueOf",paramTypeTab,Class.forNameSafe("java.lang.String"),exceptionTypeTab, 9);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("boolean");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"valueOf",paramTypeTab,Class.forNameSafe("java.lang.String"),exceptionTypeTab, 9);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("char");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"valueOf",paramTypeTab,Class.forNameSafe("java.lang.String"),exceptionTypeTab, 9);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"valueOf",paramTypeTab,Class.forNameSafe("java.lang.String"),exceptionTypeTab, 9);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("long");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"valueOf",paramTypeTab,Class.forNameSafe("java.lang.String"),exceptionTypeTab, 9);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("float");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"valueOf",paramTypeTab,Class.forNameSafe("java.lang.String"),exceptionTypeTab, 9);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("double");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"valueOf",paramTypeTab,Class.forNameSafe("java.lang.String"),exceptionTypeTab, 9);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[0];
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"intern",paramTypeTab,Class.forNameSafe("java.lang.String"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[0];
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"<clinit>",paramTypeTab,Class.forNameSafe("void"),exceptionTypeTab, 8);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "java.util.ArrayList.ArrayListSpliterator": {
				Class c = Class.forNameSafe("java.util.ArrayList.ArrayListSpliterator", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "java.util.Iterator": {
				Class c = Class.forNameSafe("java.util.Iterator", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "java.lang.Deprecated": {
				Class c = Class.forNameSafe("java.lang.Deprecated", true);
				classSet.add(c);
				c.setModifiers(8192);
				c.setIsInterface(true);
				return c;
			}
			case "java.io.IOException": {
				Class c = Class.forNameSafe("java.io.IOException", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "java.util.ArrayList.SubList": {
				Class c = Class.forNameSafe("java.util.ArrayList.SubList", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "java.util.function.Consumer": {
				Class c = Class.forNameSafe("java.util.function.Consumer", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(true);
				return c;
			}
			case "java.lang.Object": {
				Class c = Class.forNameSafe("java.lang.Object", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "java.lang.Comparable": {
				Class c = Class.forNameSafe("java.lang.Comparable", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(true);
				return c;
			}
			case "java.lang.ClassNotFoundException": {
				Class c = Class.forNameSafe("java.lang.ClassNotFoundException", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "java.util.Comparator": {
				Class c = Class.forNameSafe("java.util.Comparator", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(true);
				return c;
			}
			case "java.lang.CharSequence[]": {
				Class c = Class.forNameSafe("java.lang.CharSequence[]", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			default : return null;
		}
	}
}

Introspector for class:org.reflection_no_reflection.generator.sample.Bar=true
Introspector for class:float=false
Introspector for class:java.lang.String[]=false
Introspector for class:void=false
Introspector for class:java.lang.SuppressWarnings=false
Introspector for class:byte=false
Introspector for class:double=false
Introspector for class:java.lang.Exception=false
Introspector for class:java.util.List=false
Introspector for class:long=false
Introspector for class:java.util.ArrayList=false
Introspector for class:javax.inject.Inject=false
Introspector for class:org.reflection_no_reflection.generator.sample.Foo=true
Introspector for class:T=false
Introspector for class:java.lang.String=false
Introspector for class:int[]=false
Introspector for class:int=false
Introspector for class:boolean=false
Introspector for class:char=false
Introspector for class:short=false
Introspector for class:java.util.ListIterator=false
Introspector for class:java.io.ObjectInputStream=false
Introspector for class:java.util.AbstractList=false
Introspector for class:org.reflection_no_reflection.generator.sample.Qurtz=true
Introspector for class:java.util.function.UnaryOperator=false
Introspector for class:java.util.Locale=false
Introspector for class:java.util.ArrayList.ListItr=false
Introspector for class:java.util.ArrayList.Itr=false
Introspector for class:org.reflection_no_reflection.generator.sample.FieldTestCase=true
Introspector for class:java.io.ObjectStreamField=false
Introspector for class:java.lang.Cloneable=false
Introspector for class:java.lang.CharSequence=false
Introspector for class:java.lang.String.CaseInsensitiveComparator=false
Introspector for class:java.util.function.Predicate=false
Introspector for class:java.util.Collection=false
Introspector for class:org.reflection_no_reflection.generator.sample.ConstructorTestCase=true
Introspector for class:java.io.Serializable=false
Introspector for class:java.io.ObjectStreamField[]=false
Introspector for class:T[]=false
Introspector for class:java.lang.annotation.Annotation=false
Introspector for class:java.lang.StringBuilder=false
Introspector for class:java.io.UnsupportedEncodingException=false
Introspector for class:java.util.Spliterator=false
Introspector for class:java.lang.Throwable=false
Introspector for class:java.lang.Object[]=false
Introspector for class:E=false
Introspector for class:org.reflection_no_reflection.generator.sample.AnnotationTestCase=true
Introspector for class:java.lang.Iterable=false
Introspector for class:java.util.RandomAccess=false
Introspector for class:java.nio.charset.Charset=false
Introspector for class:java.lang.StringBuffer=false
Introspector for class:org.reflection_no_reflection.generator.sample.MethodTestCase=true
Introspector for class:java.lang.AbstractStringBuilder=false
Introspector for class:java.io.ObjectOutputStream=false
Introspector for class:java.util.ArrayList.ArrayListSpliterator=false
Introspector for class:java.util.Iterator=false
Introspector for class:java.lang.Deprecated=false
Introspector for class:java.io.IOException=false
Introspector for class:java.util.ArrayList.SubList=false
Introspector for class:char[]=false
Introspector for class:byte[]=false
Introspector for class:java.util.function.Consumer=false
Introspector for class:java.lang.Object=false
Introspector for class:java.lang.Comparable=false
Introspector for class:java.lang.ClassNotFoundException=false
Introspector for class:java.util.Comparator=false
Introspector for class:java.lang.CharSequence[]=false
methodWithPrimitiveParam
methodWithObjectParam
methodWithArrayNotLastParam
methodWithArrayNotLastParam
methodWithArrayLastParam
methodWithVarArgsParam
methodWithGenericsParam
methodWithInterfaceParam
Dumping reflector: 

package org.reflection_no_reflection.generator.sample;

import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.reflect.InvocationTargetException;
import org.reflection_no_reflection.runtime.BaseReflector;

public final class Bar$$Reflector extends BaseReflector {
  @Override
  public Object invokeMethod(Object instance, String methodName, String signature, Object... params) throws InvocationTargetException {
    switch(signature) {
      default :
    throw new InvocationTargetException(new java.lang.NoSuchMethodException("method:" + signature + " not found"));
    }
  }

  @Override
  public Object newInstance(String signature, Object... params) throws InvocationTargetException {
    switch(signature) {
      case("class org.reflection_no_reflection.generator.sample.Bar()") :
      return  new Bar();
      default :
    throw new InvocationTargetException(new java.lang.NoSuchMethodException("constructor:" + signature + " not found"));
    }
  }
}

Dumping reflector: 

package org.reflection_no_reflection.generator.sample;

import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.reflect.InvocationTargetException;
import org.reflection_no_reflection.runtime.BaseReflector;

public final class Foo$$Reflector extends BaseReflector {
  @Override
  public void setObjectField(Object instance, String name, Object value) {
    switch(name) {
    case("foo") :
    ((Foo) instance).foo = (Foo) value;
    break;
    case("bar") :
    ((Foo) instance).bar = (Bar) value;
    break;
    }
  }

  @Override
  public Object invokeMethod(Object instance, String methodName, String signature, Object... params) throws InvocationTargetException {
    switch(signature) {
      default :
    throw new InvocationTargetException(new java.lang.NoSuchMethodException("method:" + signature + " not found"));
    }
  }

  @Override
  public Object newInstance(String signature, Object... params) throws InvocationTargetException {
    switch(signature) {
      case("public class org.reflection_no_reflection.generator.sample.Foo()") :
      return  new Foo();
      default :
    throw new InvocationTargetException(new java.lang.NoSuchMethodException("constructor:" + signature + " not found"));
    }
  }
}

Dumping reflector: 

package org.reflection_no_reflection.generator.sample;

import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.reflect.InvocationTargetException;
import org.reflection_no_reflection.runtime.BaseReflector;

public final class Qurtz$$Reflector extends BaseReflector {
  @Override
  public Object invokeMethod(Object instance, String methodName, String signature, Object... params) throws InvocationTargetException {
    switch(signature) {
      default :
    throw new InvocationTargetException(new java.lang.NoSuchMethodException("method:" + signature + " not found"));
    }
  }

  @Override
  public Object newInstance(String signature, Object... params) throws InvocationTargetException {
    switch(signature) {
      default :
    throw new InvocationTargetException(new java.lang.NoSuchMethodException("constructor:" + signature + " not found"));
    }
  }
}

Dumping reflector: 

package org.reflection_no_reflection.generator.sample;

import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.reflect.InvocationTargetException;
import org.reflection_no_reflection.runtime.BaseReflector;

public final class FieldTestCase$$Reflector extends BaseReflector {
  @Override
  public void setObjectField(Object instance, String name, Object value) {
    switch(name) {
    case("a") :
    ((FieldTestCase) instance).a = (String) value;
    break;
    case("foo") :
    ((FieldTestCase) instance).foo = (Foo) value;
    break;
    case("k") :
    ((FieldTestCase) instance).k = (String[]) value;
    break;
    }
  }

  @Override
  public void setByteField(Object instance, String name, byte value) {
    switch(name) {
    case("c") :
    ((FieldTestCase) instance).c = value;
    break;
    }
  }

  @Override
  public void setShortField(Object instance, String name, short value) {
    switch(name) {
    case("d") :
    ((FieldTestCase) instance).d = value;
    break;
    }
  }

  @Override
  public void setIntField(Object instance, String name, int value) {
    switch(name) {
    case("e") :
    ((FieldTestCase) instance).e = value;
    break;
    }
  }

  @Override
  public void setLongField(Object instance, String name, long value) {
    switch(name) {
    case("f") :
    ((FieldTestCase) instance).f = value;
    break;
    }
  }

  @Override
  public void setFloatField(Object instance, String name, float value) {
    switch(name) {
    case("g") :
    ((FieldTestCase) instance).g = value;
    break;
    }
  }

  @Override
  public void setDoubleField(Object instance, String name, double value) {
    switch(name) {
    case("h") :
    ((FieldTestCase) instance).h = value;
    break;
    }
  }

  @Override
  public void setCharField(Object instance, String name, char value) {
    switch(name) {
    case("i") :
    ((FieldTestCase) instance).i = value;
    break;
    }
  }

  @Override
  public void setBooleanField(Object instance, String name, boolean value) {
    switch(name) {
    case("j") :
    ((FieldTestCase) instance).j = value;
    break;
    }
  }

  @Override
  public Object invokeMethod(Object instance, String methodName, String signature, Object... params) throws InvocationTargetException {
    switch(signature) {
      default :
    throw new InvocationTargetException(new java.lang.NoSuchMethodException("method:" + signature + " not found"));
    }
  }

  @Override
  public Object newInstance(String signature, Object... params) throws InvocationTargetException {
    switch(signature) {
      default :
    throw new InvocationTargetException(new java.lang.NoSuchMethodException("constructor:" + signature + " not found"));
    }
  }
}

Dumping reflector: 

package org.reflection_no_reflection.generator.sample;

import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.reflect.InvocationTargetException;
import org.reflection_no_reflection.runtime.BaseReflector;

public final class ConstructorTestCase$$Reflector extends BaseReflector {
  @Override
  public Object invokeMethod(Object instance, String methodName, String signature, Object... params) throws InvocationTargetException {
    switch(signature) {
      default :
    throw new InvocationTargetException(new java.lang.NoSuchMethodException("method:" + signature + " not found"));
    }
  }

  @Override
  public Object newInstance(String signature, Object... params) throws InvocationTargetException {
    switch(signature) {
      case("public class org.reflection_no_reflection.generator.sample.ConstructorTestCase()") :
      return  new ConstructorTestCase();
      default :
    throw new InvocationTargetException(new java.lang.NoSuchMethodException("constructor:" + signature + " not found"));
    }
  }
}

Dumping reflector: 

package org.reflection_no_reflection.generator.sample;

import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.reflect.InvocationTargetException;
import org.reflection_no_reflection.runtime.BaseReflector;

public final class AnnotationTestCase$$Reflector extends BaseReflector {
  @Override
  public void setObjectField(Object instance, String name, Object value) {
    switch(name) {
    case("a") :
    ((AnnotationTestCase) instance).a = (String) value;
    break;
    }
  }

  @Override
  public Object invokeMethod(Object instance, String methodName, String signature, Object... params) throws InvocationTargetException {
    switch(signature) {
      default :
    throw new InvocationTargetException(new java.lang.NoSuchMethodException("method:" + signature + " not found"));
    }
  }

  @Override
  public Object newInstance(String signature, Object... params) throws InvocationTargetException {
    switch(signature) {
      default :
    throw new InvocationTargetException(new java.lang.NoSuchMethodException("constructor:" + signature + " not found"));
    }
  }
}

Dumping reflector: 

package org.reflection_no_reflection.generator.sample;

import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.List;
import org.reflection_no_reflection.runtime.BaseReflector;

public final class MethodTestCase$$Reflector extends BaseReflector {
  @Override
  public Object invokeMethod(Object instance, String methodName, String signature, Object... params) throws InvocationTargetException {
    switch(signature) {
      case("public class void class org.reflection_no_reflection.generator.sample.MethodTestCase.simpleMethod()") :
      ((MethodTestCase) instance).simpleMethod();
      return null;
      case("public class java.lang.String class org.reflection_no_reflection.generator.sample.MethodTestCase.methodReturningString()") :
      return  ((MethodTestCase) instance).methodReturningString();
      case("public int class org.reflection_no_reflection.generator.sample.MethodTestCase.methodReturningInt()") :
      return  ((MethodTestCase) instance).methodReturningInt();
      case("public class int[] class org.reflection_no_reflection.generator.sample.MethodTestCase.methodReturningIntArray()") :
      return  ((MethodTestCase) instance).methodReturningIntArray();
      case("public class void class org.reflection_no_reflection.generator.sample.MethodTestCase.methodWithPrimitiveParam(int)") :
      ((MethodTestCase) instance).methodWithPrimitiveParam((int) params[0]);
      return null;
      case("public class void class org.reflection_no_reflection.generator.sample.MethodTestCase.methodWithObjectParam(class java.lang.String)") :
      ((MethodTestCase) instance).methodWithObjectParam((String) params[0]);
      return null;
      case("public class void class org.reflection_no_reflection.generator.sample.MethodTestCase.methodWithArrayNotLastParam(class java.lang.String[],int)") :
      ((MethodTestCase) instance).methodWithArrayNotLastParam((String[]) params[0],(int) params[1]);
      return null;
      case("public class void class org.reflection_no_reflection.generator.sample.MethodTestCase.methodWithArrayLastParam(class java.lang.String[])") :
      ((MethodTestCase) instance).methodWithArrayLastParam((String[]) params);
      return null;
      case("public class void class org.reflection_no_reflection.generator.sample.MethodTestCase.methodWithVarArgsParam(class java.lang.String[])") :
      ((MethodTestCase) instance).methodWithVarArgsParam((String[]) params);
      return null;
      case("public class void class org.reflection_no_reflection.generator.sample.MethodTestCase.methodWithGenericsParam(class java.util.ArrayList)") :
      ((MethodTestCase) instance).methodWithGenericsParam((ArrayList) params[0]);
      return null;
      case("public class void class org.reflection_no_reflection.generator.sample.MethodTestCase.methodWithInterfaceParam(interface java.util.List)") :
      ((MethodTestCase) instance).methodWithInterfaceParam((List) params[0]);
      return null;
      case("public class void class org.reflection_no_reflection.generator.sample.MethodTestCase.methodWithException() throws java.lang.Exception") :
    try {
        ((MethodTestCase) instance).methodWithException();
        return null;
    }
    catch(Exception e) {
      throw new InvocationTargetException(e);
    }
      default :
    throw new InvocationTargetException(new java.lang.NoSuchMethodException("method:" + signature + " not found"));
    }
  }

  @Override
  public Object newInstance(String signature, Object... params) throws InvocationTargetException {
    switch(signature) {
      default :
    throw new InvocationTargetException(new java.lang.NoSuchMethodException("constructor:" + signature + " not found"));
    }
  }
}

annotation methods 0
annotation fields 0
annotation interface javax.inject.Inject
annotation methods 1
annotation fields 0
annotation interface java.lang.SuppressWarnings
annotation methods 0
annotation fields 0
annotation interface java.lang.Deprecated
Dumping Annotations implementations: 

package org.reflection_no_reflection.generator.sample.gen;

import java.lang.Class;
import javax.inject.Inject;

public final class Inject$$Impl implements Inject {
  public final Class annotationType() {
    return javax.inject.Inject.class;
  }
}

Dumping Annotations implementations: 

package org.reflection_no_reflection.generator.sample.gen;

import java.lang.Class;
import java.lang.String;
import java.lang.SuppressWarnings;

public final class SuppressWarnings$$Impl implements SuppressWarnings {
  private String[] value;

  public final Class annotationType() {
    return java.lang.SuppressWarnings.class;
  }

  public void setValue(String[] value) {
    this.value = value;
  }

  public String[] value() {
    return value;
  }
}

Dumping Annotations implementations: 

package org.reflection_no_reflection.generator.sample.gen;

import java.lang.Class;
import java.lang.Deprecated;

public final class Deprecated$$Impl implements Deprecated {
  public final Class annotationType() {
    return java.lang.Deprecated.class;
  }
}

warning: File for type 'org.reflection_no_reflection.generator.sample.gen.ModuleImpl' created in the last round will not be subject to annotation processing.
warning: File for type 'org.reflection_no_reflection.generator.sample.Bar$$Reflector' created in the last round will not be subject to annotation processing.
warning: File for type 'org.reflection_no_reflection.generator.sample.Foo$$Reflector' created in the last round will not be subject to annotation processing.
warning: File for type 'org.reflection_no_reflection.generator.sample.Qurtz$$Reflector' created in the last round will not be subject to annotation processing.
warning: File for type 'org.reflection_no_reflection.generator.sample.FieldTestCase$$Reflector' created in the last round will not be subject to annotation processing.
warning: File for type 'org.reflection_no_reflection.generator.sample.ConstructorTestCase$$Reflector' created in the last round will not be subject to annotation processing.
warning: File for type 'org.reflection_no_reflection.generator.sample.AnnotationTestCase$$Reflector' created in the last round will not be subject to annotation processing.
warning: File for type 'org.reflection_no_reflection.generator.sample.MethodTestCase$$Reflector' created in the last round will not be subject to annotation processing.
warning: File for type 'org.reflection_no_reflection.generator.sample.gen.Inject$$Impl' created in the last round will not be subject to annotation processing.
warning: File for type 'org.reflection_no_reflection.generator.sample.gen.SuppressWarnings$$Impl' created in the last round will not be subject to annotation processing.
warning: File for type 'org.reflection_no_reflection.generator.sample.gen.Deprecated$$Impl' created in the last round will not be subject to annotation processing.
warning: The following options were not recognized by any processor: '[maxLevel, targetPackageName, introspector.excludes, introspector.includes]'
Note: Some input files use unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
11 warnings
:generator-integration-tests:processResources UP-TO-DATE
:generator-integration-tests:classes
:generator-integration-tests:jar
:generator-integration-tests:assemble
:generator-integration-tests:build
:processor:assemble
:processor:build
:processor-sample:compileJava
:processor-sample:processResources UP-TO-DATE
:processor-sample:classes
:processor-sample:jar
:processor-sample:assemble
:processor-sample:build

BUILD SUCCESSFUL

Total time: 6.798 secs

2018-05-21 02:38:19,376 INFO  ProjectTaskService - Detecting possible tasks...
2018-05-21 02:38:19,377 INFO  SysUtils - Execute command: [/tmp/rdisk/1263/src/reflection-no-reflection-master/generator-integration-tests/gradlew, -b, /tmp/rdisk/1263/src/reflection-no-reflection-master/generator-integration-tests/build.gradle, -Dorg.gradle.daemon=false, -Dorg.gradle.daemon.performance.enable-monitoring=false, -Dorg.gradle.configureondemand=true, tasks]
2018-05-21 02:38:26,967 INFO  ProjectTaskService - Detected possible tasks: 44
2018-05-21 02:38:26,967 INFO  ProjectTaskService - Excluded tasks (3): javadoc test check
2018-05-21 02:38:26,967 INFO  SysUtils - Execute command: [/tmp/rdisk/1263/src/reflection-no-reflection-master/generator-integration-tests/gradlew, -b, /tmp/rdisk/1263/src/reflection-no-reflection-master/generator-integration-tests/build.gradle, -Dorg.gradle.daemon=false, -Dorg.gradle.daemon.performance.enable-monitoring=false, -Dorg.gradle.configureondemand=true, --stacktrace, -x, javadoc, -x, test, -x, check, build]
2018-05-21 02:38:33,630 INFO  SysUtils - Configuration on demand is an incubating feature.
:common-lib:compileJava/tmp/rdisk/1263/src/reflection-no-reflection-master/common-lib/src/main/java/org/reflection_no_reflection/Method.java:12: warning: MethodRepository is internal proprietary API and may be removed in a future release
import sun.reflect.generics.repository.MethodRepository;
                                      ^
/tmp/rdisk/1263/src/reflection-no-reflection-master/common-lib/src/main/java/org/reflection_no_reflection/Constructor.java:9: warning: GenericsFactory is internal proprietary API and may be removed in a future release
import sun.reflect.generics.factory.GenericsFactory;
                                   ^
/tmp/rdisk/1263/src/reflection-no-reflection-master/common-lib/src/main/java/org/reflection_no_reflection/Constructor.java:10: warning: ConstructorRepository is internal proprietary API and may be removed in a future release
import sun.reflect.generics.repository.ConstructorRepository;
                                      ^
/tmp/rdisk/1263/src/reflection-no-reflection-master/common-lib/src/main/java/org/reflection_no_reflection/Method.java:27: warning: MethodRepository is internal proprietary API and may be removed in a future release
    private transient MethodRepository genericInfo;
                      ^
/tmp/rdisk/1263/src/reflection-no-reflection-master/common-lib/src/main/java/org/reflection_no_reflection/Method.java:48: warning: MethodRepository is internal proprietary API and may be removed in a future release
    private MethodRepository getGenericInfo() {
            ^
/tmp/rdisk/1263/src/reflection-no-reflection-master/common-lib/src/main/java/org/reflection_no_reflection/Constructor.java:22: warning: ConstructorRepository is internal proprietary API and may be removed in a future release
    private ConstructorRepository genericInfo;
            ^
/tmp/rdisk/1263/src/reflection-no-reflection-master/common-lib/src/main/java/org/reflection_no_reflection/Constructor.java:43: warning: GenericsFactory is internal proprietary API and may be removed in a future release
    private GenericsFactory getFactory() {
            ^
/tmp/rdisk/1263/src/reflection-no-reflection-master/common-lib/src/main/java/org/reflection_no_reflection/Constructor.java:49: warning: ConstructorRepository is internal proprietary API and may be removed in a future release
    private ConstructorRepository getGenericInfo() {
            ^
/tmp/rdisk/1263/src/reflection-no-reflection-master/common-lib/src/main/java/org/reflection_no_reflection/Constructor.java:54: warning: ConstructorRepository is internal proprietary API and may be removed in a future release
                ConstructorRepository.make(getSignature(),
                ^
Note: Some input files use unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
9 warnings

:common-lib:processResources UP-TO-DATE
:common-lib:classes
:common-lib:jar
:processor:compileJavaNote: /tmp/rdisk/1263/src/reflection-no-reflection-master/processor/src/main/java/org/reflection_no_reflection/processor/Processor.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.

:processor:processResources UP-TO-DATE
:processor:classes
:processor:jar
:generator:compileJavaNote: /tmp/rdisk/1263/src/reflection-no-reflection-master/generator/src/main/java/org/reflection_no_reflection/generator/annotation/AnnotationCreatorClassPoolVisitor.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.

:generator:processResources
:generator:classes
:generator:jar
:generator-integration-tests:compileJavawarning: [options] bootstrap class path not set in conjunction with -source 1.7

RNR Generator created.
Dumping all collected data: 

package org.reflection_no_reflection.generator.sample.gen;

import java.lang.Override;
import java.lang.String;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.reflection_no_reflection.Class;
import org.reflection_no_reflection.Constructor;
import org.reflection_no_reflection.Field;
import org.reflection_no_reflection.Method;
import org.reflection_no_reflection.generator.sample.AnnotationTestCase$$Reflector;
import org.reflection_no_reflection.generator.sample.Bar$$Reflector;
import org.reflection_no_reflection.generator.sample.ConstructorTestCase$$Reflector;
import org.reflection_no_reflection.generator.sample.FieldTestCase$$Reflector;
import org.reflection_no_reflection.generator.sample.Foo$$Reflector;
import org.reflection_no_reflection.generator.sample.MethodTestCase$$Reflector;
import org.reflection_no_reflection.generator.sample.Qurtz$$Reflector;
import org.reflection_no_reflection.runtime.Module;

public final class ModuleImpl implements Module {
	private Set<Class> classSet = new HashSet<>();

	private Map<String, Set<String>> mapAnnotationNameToNameOfClassesContainingAnnotation = new HashMap<>();

	public ModuleImpl() {
		Set<String> s0 = new HashSet();
		s0.add("org.reflection_no_reflection.generator.sample.Foo");
		s0.add("org.reflection_no_reflection.generator.sample.FieldTestCase");
		mapAnnotationNameToNameOfClassesContainingAnnotation.put("javax.inject.Inject",s0);

		Set<String> s1 = new HashSet();
		s1.add("org.reflection_no_reflection.generator.sample.AnnotationTestCase");
		mapAnnotationNameToNameOfClassesContainingAnnotation.put("java.lang.SuppressWarnings",s1);

	}

	@Override
	public Set<Class> getClassSet() {
		return classSet;
	}

	public Map<String, Set<String>> getMapAnnotationNameToNameOfClassesContainingAnnotation() {
		return mapAnnotationNameToNameOfClassesContainingAnnotation;
	}

	public Class loadClass(String className) {
		switch(className) {
			case "java.util.ListIterator": {
				Class c = Class.forNameSafe("java.util.ListIterator", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "org.reflection_no_reflection.generator.sample.Bar": {
				Class c = Class.forNameSafe("org.reflection_no_reflection.generator.sample.Bar", true);
				classSet.add(c);
				c.setSuperclass(Class.forNameSafe("java.lang.Object"));
				Class[] interfaces = new Class[0];
				int indexInterface = 0;
				c.setInterfaces(interfaces);
				 {
					Class[] paramTypeTab = new Class[0];
					Class[] exceptionTypeTab = new Class[0];
					Constructor co = new Constructor(c,paramTypeTab,exceptionTypeTab, 0);
					c.addConstructor(co);
					co.setIsVarArgs(false);
				} ;
				c.setReflector(new Bar$$Reflector());
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "java.io.ObjectInputStream": {
				Class c = Class.forNameSafe("java.io.ObjectInputStream", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "java.util.AbstractList": {
				Class c = Class.forNameSafe("java.util.AbstractList", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "org.reflection_no_reflection.generator.sample.Qurtz": {
				Class c = Class.forNameSafe("org.reflection_no_reflection.generator.sample.Qurtz", true);
				classSet.add(c);
				c.setReflector(new Qurtz$$Reflector());
				c.setModifiers(0);
				c.setIsInterface(true);
				return c;
			}
			case "java.util.function.UnaryOperator": {
				Class c = Class.forNameSafe("java.util.function.UnaryOperator", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(true);
				return c;
			}
			case "java.lang.String[]": {
				Class c = Class.forNameSafe("java.lang.String[]", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "java.util.Locale": {
				Class c = Class.forNameSafe("java.util.Locale", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "java.util.ArrayList.ListItr": {
				Class c = Class.forNameSafe("java.util.ArrayList.ListItr", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "java.util.ArrayList.Itr": {
				Class c = Class.forNameSafe("java.util.ArrayList.Itr", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "org.reflection_no_reflection.generator.sample.FieldTestCase": {
				Class c = Class.forNameSafe("org.reflection_no_reflection.generator.sample.FieldTestCase", true);
				classSet.add(c);
				 {
					Field f = new Field("a",Class.forNameSafe("java.lang.String"),c,1,null);
					c.addField(f);
					List annotationImplTab = new ArrayList(1);
					 {
						Class a = Class.forNameSafe("javax.inject.Inject");
						a.setModifiers(8192);
						classSet.add(a);
						Inject$$Impl aImpl = new Inject$$Impl();
						annotationImplTab.add(aImpl);
					}
					f.setAnnotationImplList(annotationImplTab);
				}
				 {
					Field f = new Field("foo",Class.forNameSafe("org.reflection_no_reflection.generator.sample.Foo"),c,1,null);
					c.addField(f);
					List annotationImplTab = new ArrayList(1);
					 {
						Class a = Class.forNameSafe("javax.inject.Inject");
						a.setModifiers(8192);
						classSet.add(a);
						Inject$$Impl aImpl = new Inject$$Impl();
						annotationImplTab.add(aImpl);
					}
					f.setAnnotationImplList(annotationImplTab);
				}
				 {
					Field f = new Field("c",Class.forNameSafe("byte"),c,1,null);
					c.addField(f);
					List annotationImplTab = new ArrayList(1);
					 {
						Class a = Class.forNameSafe("javax.inject.Inject");
						a.setModifiers(8192);
						classSet.add(a);
						Inject$$Impl aImpl = new Inject$$Impl();
						annotationImplTab.add(aImpl);
					}
					f.setAnnotationImplList(annotationImplTab);
				}
				 {
					Field f = new Field("d",Class.forNameSafe("short"),c,1,null);
					c.addField(f);
					List annotationImplTab = new ArrayList(1);
					 {
						Class a = Class.forNameSafe("javax.inject.Inject");
						a.setModifiers(8192);
						classSet.add(a);
						Inject$$Impl aImpl = new Inject$$Impl();
						annotationImplTab.add(aImpl);
					}
					f.setAnnotationImplList(annotationImplTab);
				}
				 {
					Field f = new Field("e",Class.forNameSafe("int"),c,1,null);
					c.addField(f);
					List annotationImplTab = new ArrayList(1);
					 {
						Class a = Class.forNameSafe("javax.inject.Inject");
						a.setModifiers(8192);
						classSet.add(a);
						Inject$$Impl aImpl = new Inject$$Impl();
						annotationImplTab.add(aImpl);
					}
					f.setAnnotationImplList(annotationImplTab);
				}
				 {
					Field f = new Field("f",Class.forNameSafe("long"),c,1,null);
					c.addField(f);
					List annotationImplTab = new ArrayList(1);
					 {
						Class a = Class.forNameSafe("javax.inject.Inject");
						a.setModifiers(8192);
						classSet.add(a);
						Inject$$Impl aImpl = new Inject$$Impl();
						annotationImplTab.add(aImpl);
					}
					f.setAnnotationImplList(annotationImplTab);
				}
				 {
					Field f = new Field("g",Class.forNameSafe("float"),c,1,null);
					c.addField(f);
					List annotationImplTab = new ArrayList(1);
					 {
						Class a = Class.forNameSafe("javax.inject.Inject");
						a.setModifiers(8192);
						classSet.add(a);
						Inject$$Impl aImpl = new Inject$$Impl();
						annotationImplTab.add(aImpl);
					}
					f.setAnnotationImplList(annotationImplTab);
				}
				 {
					Field f = new Field("h",Class.forNameSafe("double"),c,1,null);
					c.addField(f);
					List annotationImplTab = new ArrayList(1);
					 {
						Class a = Class.forNameSafe("javax.inject.Inject");
						a.setModifiers(8192);
						classSet.add(a);
						Inject$$Impl aImpl = new Inject$$Impl();
						annotationImplTab.add(aImpl);
					}
					f.setAnnotationImplList(annotationImplTab);
				}
				 {
					Field f = new Field("i",Class.forNameSafe("char"),c,1,null);
					c.addField(f);
					List annotationImplTab = new ArrayList(1);
					 {
						Class a = Class.forNameSafe("javax.inject.Inject");
						a.setModifiers(8192);
						classSet.add(a);
						Inject$$Impl aImpl = new Inject$$Impl();
						annotationImplTab.add(aImpl);
					}
					f.setAnnotationImplList(annotationImplTab);
				}
				 {
					Field f = new Field("j",Class.forNameSafe("boolean"),c,1,null);
					c.addField(f);
					List annotationImplTab = new ArrayList(1);
					 {
						Class a = Class.forNameSafe("javax.inject.Inject");
						a.setModifiers(8192);
						classSet.add(a);
						Inject$$Impl aImpl = new Inject$$Impl();
						annotationImplTab.add(aImpl);
					}
					f.setAnnotationImplList(annotationImplTab);
				}
				 {
					Field f = new Field("k",Class.forNameSafe("java.lang.String[]"),c,1,null);
					c.addField(f);
					List annotationImplTab = new ArrayList(1);
					 {
						Class a = Class.forNameSafe("javax.inject.Inject");
						a.setModifiers(8192);
						classSet.add(a);
						Inject$$Impl aImpl = new Inject$$Impl();
						annotationImplTab.add(aImpl);
					}
					f.setAnnotationImplList(annotationImplTab);
				}
				c.setReflector(new FieldTestCase$$Reflector());
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "java.io.ObjectStreamField": {
				Class c = Class.forNameSafe("java.io.ObjectStreamField", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "java.lang.Cloneable": {
				Class c = Class.forNameSafe("java.lang.Cloneable", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(true);
				return c;
			}
			case "java.lang.CharSequence": {
				Class c = Class.forNameSafe("java.lang.CharSequence", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(true);
				return c;
			}
			case "java.lang.String.CaseInsensitiveComparator": {
				Class c = Class.forNameSafe("java.lang.String.CaseInsensitiveComparator", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "java.lang.SuppressWarnings": {
				Class c = Class.forNameSafe("java.lang.SuppressWarnings", true);
				classSet.add(c);
				Class[] interfaces = new Class[1];
				int indexInterface = 0;
				interfaces[indexInterface++] = Class.forNameSafe("java.lang.annotation.Annotation");
				c.setInterfaces(interfaces);
				 {
					Class[] paramTypeTab = new Class[0];
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"value",paramTypeTab,Class.forNameSafe("java.lang.String[]"),exceptionTypeTab, 1025);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				c.setModifiers(8192);
				c.setIsInterface(true);
				return c;
			}
			case "java.util.function.Predicate": {
				Class c = Class.forNameSafe("java.util.function.Predicate", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(true);
				return c;
			}
			case "java.util.Collection": {
				Class c = Class.forNameSafe("java.util.Collection", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(true);
				return c;
			}
			case "java.lang.Exception": {
				Class c = Class.forNameSafe("java.lang.Exception", true);
				classSet.add(c);
				c.setSuperclass(Class.forNameSafe("java.lang.Throwable"));
				Class[] interfaces = new Class[0];
				int indexInterface = 0;
				c.setInterfaces(interfaces);
				 {
					Class[] paramTypeTab = new Class[0];
					Class[] exceptionTypeTab = new Class[0];
					Constructor co = new Constructor(c,paramTypeTab,exceptionTypeTab, 1);
					c.addConstructor(co);
					co.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("java.lang.String");
					Class[] exceptionTypeTab = new Class[0];
					Constructor co = new Constructor(c,paramTypeTab,exceptionTypeTab, 1);
					c.addConstructor(co);
					co.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[2];
					paramTypeTab[0] = Class.forNameSafe("java.lang.String");
					paramTypeTab[1] = Class.forNameSafe("java.lang.Throwable");
					Class[] exceptionTypeTab = new Class[0];
					Constructor co = new Constructor(c,paramTypeTab,exceptionTypeTab, 1);
					c.addConstructor(co);
					co.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("java.lang.Throwable");
					Class[] exceptionTypeTab = new Class[0];
					Constructor co = new Constructor(c,paramTypeTab,exceptionTypeTab, 1);
					c.addConstructor(co);
					co.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[4];
					paramTypeTab[0] = Class.forNameSafe("java.lang.String");
					paramTypeTab[1] = Class.forNameSafe("java.lang.Throwable");
					paramTypeTab[2] = Class.forNameSafe("boolean");
					paramTypeTab[3] = Class.forNameSafe("boolean");
					Class[] exceptionTypeTab = new Class[0];
					Constructor co = new Constructor(c,paramTypeTab,exceptionTypeTab, 4);
					c.addConstructor(co);
					co.setIsVarArgs(false);
				} ;
				 {
					Field f = new Field("serialVersionUID",Class.forNameSafe("long"),c,24,null);
					c.addField(f);
				}
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "org.reflection_no_reflection.generator.sample.ConstructorTestCase": {
				Class c = Class.forNameSafe("org.reflection_no_reflection.generator.sample.ConstructorTestCase", true);
				classSet.add(c);
				 {
					Class[] paramTypeTab = new Class[0];
					Class[] exceptionTypeTab = new Class[0];
					Constructor co = new Constructor(c,paramTypeTab,exceptionTypeTab, 1);
					c.addConstructor(co);
					List annotationImplTab = new ArrayList(1);
					 {
						Class a = Class.forNameSafe("javax.inject.Inject");
						a.setModifiers(8192);
						classSet.add(a);
						Inject$$Impl aImpl = new Inject$$Impl();
						annotationImplTab.add(aImpl);
					}
					co.setAnnotationImplList(annotationImplTab);
					co.setIsVarArgs(false);
				} ;
				c.setReflector(new ConstructorTestCase$$Reflector());
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "java.io.Serializable": {
				Class c = Class.forNameSafe("java.io.Serializable", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(true);
				return c;
			}
			case "java.util.List": {
				Class c = Class.forNameSafe("java.util.List", true);
				classSet.add(c);
				Class[] interfaces = new Class[1];
				int indexInterface = 0;
				interfaces[indexInterface++] = Class.forNameSafe("java.util.Collection");
				c.setInterfaces(interfaces);
				c.setModifiers(0);
				c.setIsInterface(true);
				return c;
			}
			case "java.io.ObjectStreamField[]": {
				Class c = Class.forNameSafe("java.io.ObjectStreamField[]", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "java.lang.annotation.Annotation": {
				Class c = Class.forNameSafe("java.lang.annotation.Annotation", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(true);
				return c;
			}
			case "java.lang.StringBuilder": {
				Class c = Class.forNameSafe("java.lang.StringBuilder", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "java.io.UnsupportedEncodingException": {
				Class c = Class.forNameSafe("java.io.UnsupportedEncodingException", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "java.util.Spliterator": {
				Class c = Class.forNameSafe("java.util.Spliterator", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "java.lang.Throwable": {
				Class c = Class.forNameSafe("java.lang.Throwable", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "java.lang.Object[]": {
				Class c = Class.forNameSafe("java.lang.Object[]", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "org.reflection_no_reflection.generator.sample.AnnotationTestCase": {
				Class c = Class.forNameSafe("org.reflection_no_reflection.generator.sample.AnnotationTestCase", true);
				classSet.add(c);
				 {
					Field f = new Field("a",Class.forNameSafe("java.lang.String"),c,1,null);
					c.addField(f);
					List annotationImplTab = new ArrayList(1);
					 {
						Class a = Class.forNameSafe("java.lang.SuppressWarnings");
						a.setModifiers(8192);
						classSet.add(a);
						SuppressWarnings$$Impl aImpl = new SuppressWarnings$$Impl();
						aImpl.setValue(new String[] {"unused"});
						annotationImplTab.add(aImpl);
					}
					f.setAnnotationImplList(annotationImplTab);
				}
				c.setReflector(new AnnotationTestCase$$Reflector());
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "java.lang.Iterable": {
				Class c = Class.forNameSafe("java.lang.Iterable", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(true);
				return c;
			}
			case "java.util.ArrayList": {
				Class c = Class.forNameSafe("java.util.ArrayList", true);
				classSet.add(c);
				c.setSuperclass(Class.forNameSafe("java.util.AbstractList"));
				Class[] interfaces = new Class[4];
				int indexInterface = 0;
				interfaces[indexInterface++] = Class.forNameSafe("java.util.List");
				interfaces[indexInterface++] = Class.forNameSafe("java.util.RandomAccess");
				interfaces[indexInterface++] = Class.forNameSafe("java.lang.Cloneable");
				interfaces[indexInterface++] = Class.forNameSafe("java.io.Serializable");
				c.setInterfaces(interfaces);
				 {
					Field f = new Field("serialVersionUID",Class.forNameSafe("long"),c,26,null);
					c.addField(f);
				}
				 {
					Field f = new Field("DEFAULT_CAPACITY",Class.forNameSafe("int"),c,26,null);
					c.addField(f);
				}
				 {
					Field f = new Field("EMPTY_ELEMENTDATA",Class.forNameSafe("java.lang.Object[]"),c,26,null);
					c.addField(f);
				}
				 {
					Field f = new Field("DEFAULTCAPACITY_EMPTY_ELEMENTDATA",Class.forNameSafe("java.lang.Object[]"),c,26,null);
					c.addField(f);
				}
				 {
					Field f = new Field("elementData",Class.forNameSafe("java.lang.Object[]"),c,0,null);
					c.addField(f);
				}
				 {
					Field f = new Field("size",Class.forNameSafe("int"),c,2,null);
					c.addField(f);
				}
				 {
					Field f = new Field("MAX_ARRAY_SIZE",Class.forNameSafe("int"),c,26,null);
					c.addField(f);
				}
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "javax.inject.Inject": {
				Class c = Class.forNameSafe("javax.inject.Inject", true);
				classSet.add(c);
				Class[] interfaces = new Class[1];
				int indexInterface = 0;
				interfaces[indexInterface++] = Class.forNameSafe("java.lang.annotation.Annotation");
				c.setInterfaces(interfaces);
				c.setModifiers(8192);
				c.setIsInterface(true);
				return c;
			}
			case "java.util.RandomAccess": {
				Class c = Class.forNameSafe("java.util.RandomAccess", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(true);
				return c;
			}
			case "org.reflection_no_reflection.generator.sample.Foo": {
				Class c = Class.forNameSafe("org.reflection_no_reflection.generator.sample.Foo", true);
				classSet.add(c);
				c.setSuperclass(Class.forNameSafe("org.reflection_no_reflection.generator.sample.Bar"));
				Class[] interfaces = new Class[1];
				int indexInterface = 0;
				interfaces[indexInterface++] = Class.forNameSafe("org.reflection_no_reflection.generator.sample.Qurtz");
				c.setInterfaces(interfaces);
				 {
					Class[] paramTypeTab = new Class[0];
					Class[] exceptionTypeTab = new Class[0];
					Constructor co = new Constructor(c,paramTypeTab,exceptionTypeTab, 1);
					c.addConstructor(co);
					co.setIsVarArgs(false);
				} ;
				 {
					Field f = new Field("foo",Class.forNameSafe("org.reflection_no_reflection.generator.sample.Foo"),c,0,null);
					c.addField(f);
					List annotationImplTab = new ArrayList(1);
					 {
						Class a = Class.forNameSafe("javax.inject.Inject");
						a.setModifiers(8192);
						classSet.add(a);
						Inject$$Impl aImpl = new Inject$$Impl();
						annotationImplTab.add(aImpl);
					}
					f.setAnnotationImplList(annotationImplTab);
				}
				 {
					Field f = new Field("bar",Class.forNameSafe("org.reflection_no_reflection.generator.sample.Bar"),c,0,null);
					c.addField(f);
					List annotationImplTab = new ArrayList(1);
					 {
						Class a = Class.forNameSafe("javax.inject.Inject");
						a.setModifiers(8192);
						classSet.add(a);
						Inject$$Impl aImpl = new Inject$$Impl();
						annotationImplTab.add(aImpl);
					}
					f.setAnnotationImplList(annotationImplTab);
				}
				c.setReflector(new Foo$$Reflector());
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "java.nio.charset.Charset": {
				Class c = Class.forNameSafe("java.nio.charset.Charset", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "java.lang.StringBuffer": {
				Class c = Class.forNameSafe("java.lang.StringBuffer", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "org.reflection_no_reflection.generator.sample.MethodTestCase": {
				Class c = Class.forNameSafe("org.reflection_no_reflection.generator.sample.MethodTestCase", true);
				classSet.add(c);
				 {
					Class[] paramTypeTab = new Class[0];
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"simpleMethod",paramTypeTab,Class.forNameSafe("void"),exceptionTypeTab, 1);
					c.addMethod(m);
					List annotationImplTab = new ArrayList(1);
					 {
						Class a = Class.forNameSafe("javax.inject.Inject");
						a.setModifiers(8192);
						classSet.add(a);
						Inject$$Impl aImpl = new Inject$$Impl();
						annotationImplTab.add(aImpl);
					}
					m.setAnnotationImplList(annotationImplTab);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[0];
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"methodReturningString",paramTypeTab,Class.forNameSafe("java.lang.String"),exceptionTypeTab, 1);
					c.addMethod(m);
					List annotationImplTab = new ArrayList(1);
					 {
						Class a = Class.forNameSafe("javax.inject.Inject");
						a.setModifiers(8192);
						classSet.add(a);
						Inject$$Impl aImpl = new Inject$$Impl();
						annotationImplTab.add(aImpl);
					}
					m.setAnnotationImplList(annotationImplTab);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[0];
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"methodReturningInt",paramTypeTab,Class.forNameSafe("int"),exceptionTypeTab, 1);
					c.addMethod(m);
					List annotationImplTab = new ArrayList(1);
					 {
						Class a = Class.forNameSafe("javax.inject.Inject");
						a.setModifiers(8192);
						classSet.add(a);
						Inject$$Impl aImpl = new Inject$$Impl();
						annotationImplTab.add(aImpl);
					}
					m.setAnnotationImplList(annotationImplTab);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[0];
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"methodReturningIntArray",paramTypeTab,Class.forNameSafe("int[]"),exceptionTypeTab, 1);
					c.addMethod(m);
					List annotationImplTab = new ArrayList(1);
					 {
						Class a = Class.forNameSafe("javax.inject.Inject");
						a.setModifiers(8192);
						classSet.add(a);
						Inject$$Impl aImpl = new Inject$$Impl();
						annotationImplTab.add(aImpl);
					}
					m.setAnnotationImplList(annotationImplTab);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"methodWithPrimitiveParam",paramTypeTab,Class.forNameSafe("void"),exceptionTypeTab, 1);
					c.addMethod(m);
					List annotationImplTab = new ArrayList(1);
					 {
						Class a = Class.forNameSafe("javax.inject.Inject");
						a.setModifiers(8192);
						classSet.add(a);
						Inject$$Impl aImpl = new Inject$$Impl();
						annotationImplTab.add(aImpl);
					}
					m.setAnnotationImplList(annotationImplTab);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("java.lang.String");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"methodWithObjectParam",paramTypeTab,Class.forNameSafe("void"),exceptionTypeTab, 1);
					c.addMethod(m);
					List annotationImplTab = new ArrayList(1);
					 {
						Class a = Class.forNameSafe("javax.inject.Inject");
						a.setModifiers(8192);
						classSet.add(a);
						Inject$$Impl aImpl = new Inject$$Impl();
						annotationImplTab.add(aImpl);
					}
					m.setAnnotationImplList(annotationImplTab);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[2];
					paramTypeTab[0] = Class.forNameSafe("java.lang.String[]");
					paramTypeTab[1] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"methodWithArrayNotLastParam",paramTypeTab,Class.forNameSafe("void"),exceptionTypeTab, 1);
					c.addMethod(m);
					List annotationImplTab = new ArrayList(1);
					 {
						Class a = Class.forNameSafe("javax.inject.Inject");
						a.setModifiers(8192);
						classSet.add(a);
						Inject$$Impl aImpl = new Inject$$Impl();
						annotationImplTab.add(aImpl);
					}
					m.setAnnotationImplList(annotationImplTab);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("java.lang.String[]");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"methodWithArrayLastParam",paramTypeTab,Class.forNameSafe("void"),exceptionTypeTab, 1);
					c.addMethod(m);
					List annotationImplTab = new ArrayList(1);
					 {
						Class a = Class.forNameSafe("javax.inject.Inject");
						a.setModifiers(8192);
						classSet.add(a);
						Inject$$Impl aImpl = new Inject$$Impl();
						annotationImplTab.add(aImpl);
					}
					m.setAnnotationImplList(annotationImplTab);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("java.lang.String[]");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"methodWithVarArgsParam",paramTypeTab,Class.forNameSafe("void"),exceptionTypeTab, 1);
					c.addMethod(m);
					List annotationImplTab = new ArrayList(1);
					 {
						Class a = Class.forNameSafe("javax.inject.Inject");
						a.setModifiers(8192);
						classSet.add(a);
						Inject$$Impl aImpl = new Inject$$Impl();
						annotationImplTab.add(aImpl);
					}
					m.setAnnotationImplList(annotationImplTab);
					m.setIsVarArgs(true);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("java.util.ArrayList");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"methodWithGenericsParam",paramTypeTab,Class.forNameSafe("void"),exceptionTypeTab, 1);
					c.addMethod(m);
					List annotationImplTab = new ArrayList(1);
					 {
						Class a = Class.forNameSafe("javax.inject.Inject");
						a.setModifiers(8192);
						classSet.add(a);
						Inject$$Impl aImpl = new Inject$$Impl();
						annotationImplTab.add(aImpl);
					}
					m.setAnnotationImplList(annotationImplTab);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("java.util.List");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"methodWithInterfaceParam",paramTypeTab,Class.forNameSafe("void"),exceptionTypeTab, 1);
					c.addMethod(m);
					List annotationImplTab = new ArrayList(1);
					 {
						Class a = Class.forNameSafe("javax.inject.Inject");
						a.setModifiers(8192);
						classSet.add(a);
						Inject$$Impl aImpl = new Inject$$Impl();
						annotationImplTab.add(aImpl);
					}
					m.setAnnotationImplList(annotationImplTab);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[0];
					Class[] exceptionTypeTab = new Class[1];
					exceptionTypeTab[0] = Class.forNameSafe("java.lang.Exception");
					Method m = new Method(c,"methodWithException",paramTypeTab,Class.forNameSafe("void"),exceptionTypeTab, 1);
					c.addMethod(m);
					List annotationImplTab = new ArrayList(1);
					 {
						Class a = Class.forNameSafe("javax.inject.Inject");
						a.setModifiers(8192);
						classSet.add(a);
						Inject$$Impl aImpl = new Inject$$Impl();
						annotationImplTab.add(aImpl);
					}
					m.setAnnotationImplList(annotationImplTab);
					m.setIsVarArgs(false);
				} ;
				c.setReflector(new MethodTestCase$$Reflector());
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "java.lang.AbstractStringBuilder": {
				Class c = Class.forNameSafe("java.lang.AbstractStringBuilder", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "java.io.ObjectOutputStream": {
				Class c = Class.forNameSafe("java.io.ObjectOutputStream", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "java.lang.String": {
				Class c = Class.forNameSafe("java.lang.String", true);
				classSet.add(c);
				c.setSuperclass(Class.forNameSafe("java.lang.Object"));
				Class[] interfaces = new Class[3];
				int indexInterface = 0;
				interfaces[indexInterface++] = Class.forNameSafe("java.io.Serializable");
				interfaces[indexInterface++] = Class.forNameSafe("java.lang.Comparable");
				interfaces[indexInterface++] = Class.forNameSafe("java.lang.CharSequence");
				c.setInterfaces(interfaces);
				 {
					Class[] paramTypeTab = new Class[0];
					Class[] exceptionTypeTab = new Class[0];
					Constructor co = new Constructor(c,paramTypeTab,exceptionTypeTab, 1);
					c.addConstructor(co);
					co.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("java.lang.String");
					Class[] exceptionTypeTab = new Class[0];
					Constructor co = new Constructor(c,paramTypeTab,exceptionTypeTab, 1);
					c.addConstructor(co);
					co.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("char[]");
					Class[] exceptionTypeTab = new Class[0];
					Constructor co = new Constructor(c,paramTypeTab,exceptionTypeTab, 1);
					c.addConstructor(co);
					co.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[3];
					paramTypeTab[0] = Class.forNameSafe("char[]");
					paramTypeTab[1] = Class.forNameSafe("int");
					paramTypeTab[2] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Constructor co = new Constructor(c,paramTypeTab,exceptionTypeTab, 1);
					c.addConstructor(co);
					co.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[3];
					paramTypeTab[0] = Class.forNameSafe("int[]");
					paramTypeTab[1] = Class.forNameSafe("int");
					paramTypeTab[2] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Constructor co = new Constructor(c,paramTypeTab,exceptionTypeTab, 1);
					c.addConstructor(co);
					co.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[4];
					paramTypeTab[0] = Class.forNameSafe("byte[]");
					paramTypeTab[1] = Class.forNameSafe("int");
					paramTypeTab[2] = Class.forNameSafe("int");
					paramTypeTab[3] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Constructor co = new Constructor(c,paramTypeTab,exceptionTypeTab, 1);
					c.addConstructor(co);
					List annotationImplTab = new ArrayList(1);
					 {
						Class a = Class.forNameSafe("java.lang.Deprecated");
						a.setModifiers(8192);
						classSet.add(a);
						Deprecated$$Impl aImpl = new Deprecated$$Impl();
						annotationImplTab.add(aImpl);
					}
					co.setAnnotationImplList(annotationImplTab);
					co.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[2];
					paramTypeTab[0] = Class.forNameSafe("byte[]");
					paramTypeTab[1] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Constructor co = new Constructor(c,paramTypeTab,exceptionTypeTab, 1);
					c.addConstructor(co);
					List annotationImplTab = new ArrayList(1);
					 {
						Class a = Class.forNameSafe("java.lang.Deprecated");
						a.setModifiers(8192);
						classSet.add(a);
						Deprecated$$Impl aImpl = new Deprecated$$Impl();
						annotationImplTab.add(aImpl);
					}
					co.setAnnotationImplList(annotationImplTab);
					co.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[4];
					paramTypeTab[0] = Class.forNameSafe("byte[]");
					paramTypeTab[1] = Class.forNameSafe("int");
					paramTypeTab[2] = Class.forNameSafe("int");
					paramTypeTab[3] = Class.forNameSafe("java.lang.String");
					Class[] exceptionTypeTab = new Class[1];
					exceptionTypeTab[0] = Class.forNameSafe("java.io.UnsupportedEncodingException");
					Constructor co = new Constructor(c,paramTypeTab,exceptionTypeTab, 1);
					c.addConstructor(co);
					co.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[4];
					paramTypeTab[0] = Class.forNameSafe("byte[]");
					paramTypeTab[1] = Class.forNameSafe("int");
					paramTypeTab[2] = Class.forNameSafe("int");
					paramTypeTab[3] = Class.forNameSafe("java.nio.charset.Charset");
					Class[] exceptionTypeTab = new Class[0];
					Constructor co = new Constructor(c,paramTypeTab,exceptionTypeTab, 1);
					c.addConstructor(co);
					co.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[2];
					paramTypeTab[0] = Class.forNameSafe("byte[]");
					paramTypeTab[1] = Class.forNameSafe("java.lang.String");
					Class[] exceptionTypeTab = new Class[1];
					exceptionTypeTab[0] = Class.forNameSafe("java.io.UnsupportedEncodingException");
					Constructor co = new Constructor(c,paramTypeTab,exceptionTypeTab, 1);
					c.addConstructor(co);
					co.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[2];
					paramTypeTab[0] = Class.forNameSafe("byte[]");
					paramTypeTab[1] = Class.forNameSafe("java.nio.charset.Charset");
					Class[] exceptionTypeTab = new Class[0];
					Constructor co = new Constructor(c,paramTypeTab,exceptionTypeTab, 1);
					c.addConstructor(co);
					co.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[3];
					paramTypeTab[0] = Class.forNameSafe("byte[]");
					paramTypeTab[1] = Class.forNameSafe("int");
					paramTypeTab[2] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Constructor co = new Constructor(c,paramTypeTab,exceptionTypeTab, 1);
					c.addConstructor(co);
					co.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("byte[]");
					Class[] exceptionTypeTab = new Class[0];
					Constructor co = new Constructor(c,paramTypeTab,exceptionTypeTab, 1);
					c.addConstructor(co);
					co.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("java.lang.StringBuffer");
					Class[] exceptionTypeTab = new Class[0];
					Constructor co = new Constructor(c,paramTypeTab,exceptionTypeTab, 1);
					c.addConstructor(co);
					co.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("java.lang.StringBuilder");
					Class[] exceptionTypeTab = new Class[0];
					Constructor co = new Constructor(c,paramTypeTab,exceptionTypeTab, 1);
					c.addConstructor(co);
					co.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[2];
					paramTypeTab[0] = Class.forNameSafe("char[]");
					paramTypeTab[1] = Class.forNameSafe("boolean");
					Class[] exceptionTypeTab = new Class[0];
					Constructor co = new Constructor(c,paramTypeTab,exceptionTypeTab, 0);
					c.addConstructor(co);
					co.setIsVarArgs(false);
				} ;
				 {
					Field f = new Field("value",Class.forNameSafe("char[]"),c,18,null);
					c.addField(f);
				}
				 {
					Field f = new Field("hash",Class.forNameSafe("int"),c,2,null);
					c.addField(f);
				}
				 {
					Field f = new Field("serialVersionUID",Class.forNameSafe("long"),c,26,null);
					c.addField(f);
				}
				 {
					Field f = new Field("serialPersistentFields",Class.forNameSafe("java.io.ObjectStreamField[]"),c,26,null);
					c.addField(f);
				}
				 {
					Field f = new Field("CASE_INSENSITIVE_ORDER",Class.forNameSafe("java.util.Comparator"),c,25,null);
					c.addField(f);
				}
				 {
					Class[] paramTypeTab = new Class[3];
					paramTypeTab[0] = Class.forNameSafe("byte[]");
					paramTypeTab[1] = Class.forNameSafe("int");
					paramTypeTab[2] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"checkBounds",paramTypeTab,Class.forNameSafe("void"),exceptionTypeTab, 10);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[0];
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"length",paramTypeTab,Class.forNameSafe("int"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[0];
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"isEmpty",paramTypeTab,Class.forNameSafe("boolean"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"charAt",paramTypeTab,Class.forNameSafe("char"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"codePointAt",paramTypeTab,Class.forNameSafe("int"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"codePointBefore",paramTypeTab,Class.forNameSafe("int"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[2];
					paramTypeTab[0] = Class.forNameSafe("int");
					paramTypeTab[1] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"codePointCount",paramTypeTab,Class.forNameSafe("int"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[2];
					paramTypeTab[0] = Class.forNameSafe("int");
					paramTypeTab[1] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"offsetByCodePoints",paramTypeTab,Class.forNameSafe("int"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[2];
					paramTypeTab[0] = Class.forNameSafe("char[]");
					paramTypeTab[1] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"getChars",paramTypeTab,Class.forNameSafe("void"),exceptionTypeTab, 0);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[4];
					paramTypeTab[0] = Class.forNameSafe("int");
					paramTypeTab[1] = Class.forNameSafe("int");
					paramTypeTab[2] = Class.forNameSafe("char[]");
					paramTypeTab[3] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"getChars",paramTypeTab,Class.forNameSafe("void"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[4];
					paramTypeTab[0] = Class.forNameSafe("int");
					paramTypeTab[1] = Class.forNameSafe("int");
					paramTypeTab[2] = Class.forNameSafe("byte[]");
					paramTypeTab[3] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"getBytes",paramTypeTab,Class.forNameSafe("void"),exceptionTypeTab, 1);
					c.addMethod(m);
					List annotationImplTab = new ArrayList(1);
					 {
						Class a = Class.forNameSafe("java.lang.Deprecated");
						a.setModifiers(8192);
						classSet.add(a);
						Deprecated$$Impl aImpl = new Deprecated$$Impl();
						annotationImplTab.add(aImpl);
					}
					m.setAnnotationImplList(annotationImplTab);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("java.lang.String");
					Class[] exceptionTypeTab = new Class[1];
					exceptionTypeTab[0] = Class.forNameSafe("java.io.UnsupportedEncodingException");
					Method m = new Method(c,"getBytes",paramTypeTab,Class.forNameSafe("byte[]"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("java.nio.charset.Charset");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"getBytes",paramTypeTab,Class.forNameSafe("byte[]"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[0];
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"getBytes",paramTypeTab,Class.forNameSafe("byte[]"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("java.lang.Object");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"equals",paramTypeTab,Class.forNameSafe("boolean"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("java.lang.StringBuffer");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"contentEquals",paramTypeTab,Class.forNameSafe("boolean"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("java.lang.AbstractStringBuilder");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"nonSyncContentEquals",paramTypeTab,Class.forNameSafe("boolean"),exceptionTypeTab, 2);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("java.lang.CharSequence");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"contentEquals",paramTypeTab,Class.forNameSafe("boolean"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("java.lang.String");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"equalsIgnoreCase",paramTypeTab,Class.forNameSafe("boolean"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("java.lang.String");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"compareTo",paramTypeTab,Class.forNameSafe("int"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("java.lang.String");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"compareToIgnoreCase",paramTypeTab,Class.forNameSafe("int"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[4];
					paramTypeTab[0] = Class.forNameSafe("int");
					paramTypeTab[1] = Class.forNameSafe("java.lang.String");
					paramTypeTab[2] = Class.forNameSafe("int");
					paramTypeTab[3] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"regionMatches",paramTypeTab,Class.forNameSafe("boolean"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[5];
					paramTypeTab[0] = Class.forNameSafe("boolean");
					paramTypeTab[1] = Class.forNameSafe("int");
					paramTypeTab[2] = Class.forNameSafe("java.lang.String");
					paramTypeTab[3] = Class.forNameSafe("int");
					paramTypeTab[4] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"regionMatches",paramTypeTab,Class.forNameSafe("boolean"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[2];
					paramTypeTab[0] = Class.forNameSafe("java.lang.String");
					paramTypeTab[1] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"startsWith",paramTypeTab,Class.forNameSafe("boolean"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("java.lang.String");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"startsWith",paramTypeTab,Class.forNameSafe("boolean"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("java.lang.String");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"endsWith",paramTypeTab,Class.forNameSafe("boolean"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[0];
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"hashCode",paramTypeTab,Class.forNameSafe("int"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"indexOf",paramTypeTab,Class.forNameSafe("int"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[2];
					paramTypeTab[0] = Class.forNameSafe("int");
					paramTypeTab[1] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"indexOf",paramTypeTab,Class.forNameSafe("int"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[2];
					paramTypeTab[0] = Class.forNameSafe("int");
					paramTypeTab[1] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"indexOfSupplementary",paramTypeTab,Class.forNameSafe("int"),exceptionTypeTab, 2);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"lastIndexOf",paramTypeTab,Class.forNameSafe("int"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[2];
					paramTypeTab[0] = Class.forNameSafe("int");
					paramTypeTab[1] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"lastIndexOf",paramTypeTab,Class.forNameSafe("int"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[2];
					paramTypeTab[0] = Class.forNameSafe("int");
					paramTypeTab[1] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"lastIndexOfSupplementary",paramTypeTab,Class.forNameSafe("int"),exceptionTypeTab, 2);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("java.lang.String");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"indexOf",paramTypeTab,Class.forNameSafe("int"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[2];
					paramTypeTab[0] = Class.forNameSafe("java.lang.String");
					paramTypeTab[1] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"indexOf",paramTypeTab,Class.forNameSafe("int"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[5];
					paramTypeTab[0] = Class.forNameSafe("char[]");
					paramTypeTab[1] = Class.forNameSafe("int");
					paramTypeTab[2] = Class.forNameSafe("int");
					paramTypeTab[3] = Class.forNameSafe("java.lang.String");
					paramTypeTab[4] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"indexOf",paramTypeTab,Class.forNameSafe("int"),exceptionTypeTab, 8);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[7];
					paramTypeTab[0] = Class.forNameSafe("char[]");
					paramTypeTab[1] = Class.forNameSafe("int");
					paramTypeTab[2] = Class.forNameSafe("int");
					paramTypeTab[3] = Class.forNameSafe("char[]");
					paramTypeTab[4] = Class.forNameSafe("int");
					paramTypeTab[5] = Class.forNameSafe("int");
					paramTypeTab[6] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"indexOf",paramTypeTab,Class.forNameSafe("int"),exceptionTypeTab, 8);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("java.lang.String");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"lastIndexOf",paramTypeTab,Class.forNameSafe("int"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[2];
					paramTypeTab[0] = Class.forNameSafe("java.lang.String");
					paramTypeTab[1] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"lastIndexOf",paramTypeTab,Class.forNameSafe("int"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[5];
					paramTypeTab[0] = Class.forNameSafe("char[]");
					paramTypeTab[1] = Class.forNameSafe("int");
					paramTypeTab[2] = Class.forNameSafe("int");
					paramTypeTab[3] = Class.forNameSafe("java.lang.String");
					paramTypeTab[4] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"lastIndexOf",paramTypeTab,Class.forNameSafe("int"),exceptionTypeTab, 8);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[7];
					paramTypeTab[0] = Class.forNameSafe("char[]");
					paramTypeTab[1] = Class.forNameSafe("int");
					paramTypeTab[2] = Class.forNameSafe("int");
					paramTypeTab[3] = Class.forNameSafe("char[]");
					paramTypeTab[4] = Class.forNameSafe("int");
					paramTypeTab[5] = Class.forNameSafe("int");
					paramTypeTab[6] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"lastIndexOf",paramTypeTab,Class.forNameSafe("int"),exceptionTypeTab, 8);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"substring",paramTypeTab,Class.forNameSafe("java.lang.String"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[2];
					paramTypeTab[0] = Class.forNameSafe("int");
					paramTypeTab[1] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"substring",paramTypeTab,Class.forNameSafe("java.lang.String"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[2];
					paramTypeTab[0] = Class.forNameSafe("int");
					paramTypeTab[1] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"subSequence",paramTypeTab,Class.forNameSafe("java.lang.CharSequence"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("java.lang.String");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"concat",paramTypeTab,Class.forNameSafe("java.lang.String"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[2];
					paramTypeTab[0] = Class.forNameSafe("char");
					paramTypeTab[1] = Class.forNameSafe("char");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"replace",paramTypeTab,Class.forNameSafe("java.lang.String"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("java.lang.String");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"matches",paramTypeTab,Class.forNameSafe("boolean"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("java.lang.CharSequence");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"contains",paramTypeTab,Class.forNameSafe("boolean"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[2];
					paramTypeTab[0] = Class.forNameSafe("java.lang.String");
					paramTypeTab[1] = Class.forNameSafe("java.lang.String");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"replaceFirst",paramTypeTab,Class.forNameSafe("java.lang.String"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[2];
					paramTypeTab[0] = Class.forNameSafe("java.lang.String");
					paramTypeTab[1] = Class.forNameSafe("java.lang.String");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"replaceAll",paramTypeTab,Class.forNameSafe("java.lang.String"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[2];
					paramTypeTab[0] = Class.forNameSafe("java.lang.CharSequence");
					paramTypeTab[1] = Class.forNameSafe("java.lang.CharSequence");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"replace",paramTypeTab,Class.forNameSafe("java.lang.String"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[2];
					paramTypeTab[0] = Class.forNameSafe("java.lang.String");
					paramTypeTab[1] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"split",paramTypeTab,Class.forNameSafe("java.lang.String[]"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("java.lang.String");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"split",paramTypeTab,Class.forNameSafe("java.lang.String[]"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[2];
					paramTypeTab[0] = Class.forNameSafe("java.lang.CharSequence");
					paramTypeTab[1] = Class.forNameSafe("java.lang.CharSequence[]");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"join",paramTypeTab,Class.forNameSafe("java.lang.String"),exceptionTypeTab, 9);
					c.addMethod(m);
					m.setIsVarArgs(true);
				} ;
				 {
					Class[] paramTypeTab = new Class[2];
					paramTypeTab[0] = Class.forNameSafe("java.lang.CharSequence");
					paramTypeTab[1] = Class.forNameSafe("java.lang.Iterable");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"join",paramTypeTab,Class.forNameSafe("java.lang.String"),exceptionTypeTab, 9);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("java.util.Locale");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"toLowerCase",paramTypeTab,Class.forNameSafe("java.lang.String"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[0];
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"toLowerCase",paramTypeTab,Class.forNameSafe("java.lang.String"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("java.util.Locale");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"toUpperCase",paramTypeTab,Class.forNameSafe("java.lang.String"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[0];
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"toUpperCase",paramTypeTab,Class.forNameSafe("java.lang.String"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[0];
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"trim",paramTypeTab,Class.forNameSafe("java.lang.String"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[0];
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"toString",paramTypeTab,Class.forNameSafe("java.lang.String"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[0];
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"toCharArray",paramTypeTab,Class.forNameSafe("char[]"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[2];
					paramTypeTab[0] = Class.forNameSafe("java.lang.String");
					paramTypeTab[1] = Class.forNameSafe("java.lang.Object[]");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"format",paramTypeTab,Class.forNameSafe("java.lang.String"),exceptionTypeTab, 9);
					c.addMethod(m);
					m.setIsVarArgs(true);
				} ;
				 {
					Class[] paramTypeTab = new Class[3];
					paramTypeTab[0] = Class.forNameSafe("java.util.Locale");
					paramTypeTab[1] = Class.forNameSafe("java.lang.String");
					paramTypeTab[2] = Class.forNameSafe("java.lang.Object[]");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"format",paramTypeTab,Class.forNameSafe("java.lang.String"),exceptionTypeTab, 9);
					c.addMethod(m);
					m.setIsVarArgs(true);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("java.lang.Object");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"valueOf",paramTypeTab,Class.forNameSafe("java.lang.String"),exceptionTypeTab, 9);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("char[]");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"valueOf",paramTypeTab,Class.forNameSafe("java.lang.String"),exceptionTypeTab, 9);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[3];
					paramTypeTab[0] = Class.forNameSafe("char[]");
					paramTypeTab[1] = Class.forNameSafe("int");
					paramTypeTab[2] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"valueOf",paramTypeTab,Class.forNameSafe("java.lang.String"),exceptionTypeTab, 9);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[3];
					paramTypeTab[0] = Class.forNameSafe("char[]");
					paramTypeTab[1] = Class.forNameSafe("int");
					paramTypeTab[2] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"copyValueOf",paramTypeTab,Class.forNameSafe("java.lang.String"),exceptionTypeTab, 9);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("char[]");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"copyValueOf",paramTypeTab,Class.forNameSafe("java.lang.String"),exceptionTypeTab, 9);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("boolean");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"valueOf",paramTypeTab,Class.forNameSafe("java.lang.String"),exceptionTypeTab, 9);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("char");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"valueOf",paramTypeTab,Class.forNameSafe("java.lang.String"),exceptionTypeTab, 9);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("int");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"valueOf",paramTypeTab,Class.forNameSafe("java.lang.String"),exceptionTypeTab, 9);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("long");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"valueOf",paramTypeTab,Class.forNameSafe("java.lang.String"),exceptionTypeTab, 9);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("float");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"valueOf",paramTypeTab,Class.forNameSafe("java.lang.String"),exceptionTypeTab, 9);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[1];
					paramTypeTab[0] = Class.forNameSafe("double");
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"valueOf",paramTypeTab,Class.forNameSafe("java.lang.String"),exceptionTypeTab, 9);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[0];
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"intern",paramTypeTab,Class.forNameSafe("java.lang.String"),exceptionTypeTab, 1);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				 {
					Class[] paramTypeTab = new Class[0];
					Class[] exceptionTypeTab = new Class[0];
					Method m = new Method(c,"<clinit>",paramTypeTab,Class.forNameSafe("void"),exceptionTypeTab, 8);
					c.addMethod(m);
					m.setIsVarArgs(false);
				} ;
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "java.util.ArrayList.ArrayListSpliterator": {
				Class c = Class.forNameSafe("java.util.ArrayList.ArrayListSpliterator", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "java.util.Iterator": {
				Class c = Class.forNameSafe("java.util.Iterator", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "java.lang.Deprecated": {
				Class c = Class.forNameSafe("java.lang.Deprecated", true);
				classSet.add(c);
				c.setModifiers(8192);
				c.setIsInterface(true);
				return c;
			}
			case "java.io.IOException": {
				Class c = Class.forNameSafe("java.io.IOException", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "java.util.ArrayList.SubList": {
				Class c = Class.forNameSafe("java.util.ArrayList.SubList", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "java.util.function.Consumer": {
				Class c = Class.forNameSafe("java.util.function.Consumer", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(true);
				return c;
			}
			case "java.lang.Object": {
				Class c = Class.forNameSafe("java.lang.Object", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "java.lang.Comparable": {
				Class c = Class.forNameSafe("java.lang.Comparable", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(true);
				return c;
			}
			case "java.lang.ClassNotFoundException": {
				Class c = Class.forNameSafe("java.lang.ClassNotFoundException", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			case "java.util.Comparator": {
				Class c = Class.forNameSafe("java.util.Comparator", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(true);
				return c;
			}
			case "java.lang.CharSequence[]": {
				Class c = Class.forNameSafe("java.lang.CharSequence[]", true);
				classSet.add(c);
				c.setModifiers(0);
				c.setIsInterface(false);
				return c;
			}
			default : return null;
		}
	}
}

Introspector for class:org.reflection_no_reflection.generator.sample.Bar=true
Introspector for class:float=false
Introspector for class:java.lang.String[]=false
Introspector for class:void=false
Introspector for class:java.lang.SuppressWarnings=false
Introspector for class:byte=false
Introspector for class:double=false
Introspector for class:java.lang.Exception=false
Introspector for class:java.util.List=false
Introspector for class:long=false
Introspector for class:java.util.ArrayList=false
Introspector for class:javax.inject.Inject=false
Introspector for class:org.reflection_no_reflection.generator.sample.Foo=true
Introspector for class:T=false
Introspector for class:java.lang.String=false
Introspector for class:int[]=false
Introspector for class:int=false
Introspector for class:boolean=false
Introspector for class:char=false
Introspector for class:short=false
Introspector for class:java.util.ListIterator=false
Introspector for class:java.io.ObjectInputStream=false
Introspector for class:java.util.AbstractList=false
Introspector for class:org.reflection_no_reflection.generator.sample.Qurtz=true
Introspector for class:java.util.function.UnaryOperator=false
Introspector for class:java.util.Locale=false
Introspector for class:java.util.ArrayList.ListItr=false
Introspector for class:java.util.ArrayList.Itr=false
Introspector for class:org.reflection_no_reflection.generator.sample.FieldTestCase=true
Introspector for class:java.io.ObjectStreamField=false
Introspector for class:java.lang.Cloneable=false
Introspector for class:java.lang.CharSequence=false
Introspector for class:java.lang.String.CaseInsensitiveComparator=false
Introspector for class:java.util.function.Predicate=false
Introspector for class:java.util.Collection=false
Introspector for class:org.reflection_no_reflection.generator.sample.ConstructorTestCase=true
Introspector for class:java.io.Serializable=false
Introspector for class:java.io.ObjectStreamField[]=false
Introspector for class:T[]=false
Introspector for class:java.lang.annotation.Annotation=false
Introspector for class:java.lang.StringBuilder=false
Introspector for class:java.io.UnsupportedEncodingException=false
Introspector for class:java.util.Spliterator=false
Introspector for class:java.lang.Throwable=false
Introspector for class:java.lang.Object[]=false
Introspector for class:E=false
Introspector for class:org.reflection_no_reflection.generator.sample.AnnotationTestCase=true
Introspector for class:java.lang.Iterable=false
Introspector for class:java.util.RandomAccess=false
Introspector for class:java.nio.charset.Charset=false
Introspector for class:java.lang.StringBuffer=false
Introspector for class:org.reflection_no_reflection.generator.sample.MethodTestCase=true
Introspector for class:java.lang.AbstractStringBuilder=false
Introspector for class:java.io.ObjectOutputStream=false
Introspector for class:java.util.ArrayList.ArrayListSpliterator=false
Introspector for class:java.util.Iterator=false
Introspector for class:java.lang.Deprecated=false
Introspector for class:java.io.IOException=false
Introspector for class:java.util.ArrayList.SubList=false
Introspector for class:char[]=false
Introspector for class:byte[]=false
Introspector for class:java.util.function.Consumer=false
Introspector for class:java.lang.Object=false
Introspector for class:java.lang.Comparable=false
Introspector for class:java.lang.ClassNotFoundException=false
Introspector for class:java.util.Comparator=false
Introspector for class:java.lang.CharSequence[]=false
methodWithPrimitiveParam
methodWithObjectParam
methodWithArrayNotLastParam
methodWithArrayNotLastParam
methodWithArrayLastParam
methodWithVarArgsParam
methodWithGenericsParam
methodWithInterfaceParam
Dumping reflector: 

package org.reflection_no_reflection.generator.sample;

import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.reflect.InvocationTargetException;
import org.reflection_no_reflection.runtime.BaseReflector;

public final class Bar$$Reflector extends BaseReflector {
  @Override
  public Object invokeMethod(Object instance, String methodName, String signature, Object... params) throws InvocationTargetException {
    switch(signature) {
      default :
    throw new InvocationTargetException(new java.lang.NoSuchMethodException("method:" + signature + " not found"));
    }
  }

  @Override
  public Object newInstance(String signature, Object... params) throws InvocationTargetException {
    switch(signature) {
      case("class org.reflection_no_reflection.generator.sample.Bar()") :
      return  new Bar();
      default :
    throw new InvocationTargetException(new java.lang.NoSuchMethodException("constructor:" + signature + " not found"));
    }
  }
}

Dumping reflector: 

package org.reflection_no_reflection.generator.sample;

import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.reflect.InvocationTargetException;
import org.reflection_no_reflection.runtime.BaseReflector;

public final class Foo$$Reflector extends BaseReflector {
  @Override
  public void setObjectField(Object instance, String name, Object value) {
    switch(name) {
    case("foo") :
    ((Foo) instance).foo = (Foo) value;
    break;
    case("bar") :
    ((Foo) instance).bar = (Bar) value;
    break;
    }
  }

  @Override
  public Object invokeMethod(Object instance, String methodName, String signature, Object... params) throws InvocationTargetException {
    switch(signature) {
      default :
    throw new InvocationTargetException(new java.lang.NoSuchMethodException("method:" + signature + " not found"));
    }
  }

  @Override
  public Object newInstance(String signature, Object... params) throws InvocationTargetException {
    switch(signature) {
      case("public class org.reflection_no_reflection.generator.sample.Foo()") :
      return  new Foo();
      default :
    throw new InvocationTargetException(new java.lang.NoSuchMethodException("constructor:" + signature + " not found"));
    }
  }
}

Dumping reflector: 

package org.reflection_no_reflection.generator.sample;

import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.reflect.InvocationTargetException;
import org.reflection_no_reflection.runtime.BaseReflector;

public final class Qurtz$$Reflector extends BaseReflector {
  @Override
  public Object invokeMethod(Object instance, String methodName, String signature, Object... params) throws InvocationTargetException {
    switch(signature) {
      default :
    throw new InvocationTargetException(new java.lang.NoSuchMethodException("method:" + signature + " not found"));
    }
  }

  @Override
  public Object newInstance(String signature, Object... params) throws InvocationTargetException {
    switch(signature) {
      default :
    throw new InvocationTargetException(new java.lang.NoSuchMethodException("constructor:" + signature + " not found"));
    }
  }
}

Dumping reflector: 

package org.reflection_no_reflection.generator.sample;

import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.reflect.InvocationTargetException;
import org.reflection_no_reflection.runtime.BaseReflector;

public final class FieldTestCase$$Reflector extends BaseReflector {
  @Override
  public void setObjectField(Object instance, String name, Object value) {
    switch(name) {
    case("a") :
    ((FieldTestCase) instance).a = (String) value;
    break;
    case("foo") :
    ((FieldTestCase) instance).foo = (Foo) value;
    break;
    case("k") :
    ((FieldTestCase) instance).k = (String[]) value;
    break;
    }
  }

  @Override
  public void setByteField(Object instance, String name, byte value) {
    switch(name) {
    case("c") :
    ((FieldTestCase) instance).c = value;
    break;
    }
  }

  @Override
  public void setShortField(Object instance, String name, short value) {
    switch(name) {
    case("d") :
    ((FieldTestCase) instance).d = value;
    break;
    }
  }

  @Override
  public void setIntField(Object instance, String name, int value) {
    switch(name) {
    case("e") :
    ((FieldTestCase) instance).e = value;
    break;
    }
  }

  @Override
  public void setLongField(Object instance, String name, long value) {
    switch(name) {
    case("f") :
    ((FieldTestCase) instance).f = value;
    break;
    }
  }

  @Override
  public void setFloatField(Object instance, String name, float value) {
    switch(name) {
    case("g") :
    ((FieldTestCase) instance).g = value;
    break;
    }
  }

  @Override
  public void setDoubleField(Object instance, String name, double value) {
    switch(name) {
    case("h") :
    ((FieldTestCase) instance).h = value;
    break;
    }
  }

  @Override
  public void setCharField(Object instance, String name, char value) {
    switch(name) {
    case("i") :
    ((FieldTestCase) instance).i = value;
    break;
    }
  }

  @Override
  public void setBooleanField(Object instance, String name, boolean value) {
    switch(name) {
    case("j") :
    ((FieldTestCase) instance).j = value;
    break;
    }
  }

  @Override
  public Object invokeMethod(Object instance, String methodName, String signature, Object... params) throws InvocationTargetException {
    switch(signature) {
      default :
    throw new InvocationTargetException(new java.lang.NoSuchMethodException("method:" + signature + " not found"));
    }
  }

  @Override
  public Object newInstance(String signature, Object... params) throws InvocationTargetException {
    switch(signature) {
      default :
    throw new InvocationTargetException(new java.lang.NoSuchMethodException("constructor:" + signature + " not found"));
    }
  }
}

Dumping reflector: 

package org.reflection_no_reflection.generator.sample;

import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.reflect.InvocationTargetException;
import org.reflection_no_reflection.runtime.BaseReflector;

public final class ConstructorTestCase$$Reflector extends BaseReflector {
  @Override
  public Object invokeMethod(Object instance, String methodName, String signature, Object... params) throws InvocationTargetException {
    switch(signature) {
      default :
    throw new InvocationTargetException(new java.lang.NoSuchMethodException("method:" + signature + " not found"));
    }
  }

  @Override
  public Object newInstance(String signature, Object... params) throws InvocationTargetException {
    switch(signature) {
      case("public class org.reflection_no_reflection.generator.sample.ConstructorTestCase()") :
      return  new ConstructorTestCase();
      default :
    throw new InvocationTargetException(new java.lang.NoSuchMethodException("constructor:" + signature + " not found"));
    }
  }
}

Dumping reflector: 

package org.reflection_no_reflection.generator.sample;

import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.reflect.InvocationTargetException;
import org.reflection_no_reflection.runtime.BaseReflector;

public final class AnnotationTestCase$$Reflector extends BaseReflector {
  @Override
  public void setObjectField(Object instance, String name, Object value) {
    switch(name) {
    case("a") :
    ((AnnotationTestCase) instance).a = (String) value;
    break;
    }
  }

  @Override
  public Object invokeMethod(Object instance, String methodName, String signature, Object... params) throws InvocationTargetException {
    switch(signature) {
      default :
    throw new InvocationTargetException(new java.lang.NoSuchMethodException("method:" + signature + " not found"));
    }
  }

  @Override
  public Object newInstance(String signature, Object... params) throws InvocationTargetException {
    switch(signature) {
      default :
    throw new InvocationTargetException(new java.lang.NoSuchMethodException("constructor:" + signature + " not found"));
    }
  }
}

Dumping reflector: 

package org.reflection_no_reflection.generator.sample;

import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.List;
import org.reflection_no_reflection.runtime.BaseReflector;

public final class MethodTestCase$$Reflector extends BaseReflector {
  @Override
  public Object invokeMethod(Object instance, String methodName, String signature, Object... params) throws InvocationTargetException {
    switch(signature) {
      case("public class void class org.reflection_no_reflection.generator.sample.MethodTestCase.simpleMethod()") :
      ((MethodTestCase) instance).simpleMethod();
      return null;
      case("public class java.lang.String class org.reflection_no_reflection.generator.sample.MethodTestCase.methodReturningString()") :
      return  ((MethodTestCase) instance).methodReturningString();
      case("public int class org.reflection_no_reflection.generator.sample.MethodTestCase.methodReturningInt()") :
      return  ((MethodTestCase) instance).methodReturningInt();
      case("public class int[] class org.reflection_no_reflection.generator.sample.MethodTestCase.methodReturningIntArray()") :
      return  ((MethodTestCase) instance).methodReturningIntArray();
      case("public class void class org.reflection_no_reflection.generator.sample.MethodTestCase.methodWithPrimitiveParam(int)") :
      ((MethodTestCase) instance).methodWithPrimitiveParam((int) params[0]);
      return null;
      case("public class void class org.reflection_no_reflection.generator.sample.MethodTestCase.methodWithObjectParam(class java.lang.String)") :
      ((MethodTestCase) instance).methodWithObjectParam((String) params[0]);
      return null;
      case("public class void class org.reflection_no_reflection.generator.sample.MethodTestCase.methodWithArrayNotLastParam(class java.lang.String[],int)") :
      ((MethodTestCase) instance).methodWithArrayNotLastParam((String[]) params[0],(int) params[1]);
      return null;
      case("public class void class org.reflection_no_reflection.generator.sample.MethodTestCase.methodWithArrayLastParam(class java.lang.String[])") :
      ((MethodTestCase) instance).methodWithArrayLastParam((String[]) params);
      return null;
      case("public class void class org.reflection_no_reflection.generator.sample.MethodTestCase.methodWithVarArgsParam(class java.lang.String[])") :
      ((MethodTestCase) instance).methodWithVarArgsParam((String[]) params);
      return null;
      case("public class void class org.reflection_no_reflection.generator.sample.MethodTestCase.methodWithGenericsParam(class java.util.ArrayList)") :
      ((MethodTestCase) instance).methodWithGenericsParam((ArrayList) params[0]);
      return null;
      case("public class void class org.reflection_no_reflection.generator.sample.MethodTestCase.methodWithInterfaceParam(interface java.util.List)") :
      ((MethodTestCase) instance).methodWithInterfaceParam((List) params[0]);
      return null;
      case("public class void class org.reflection_no_reflection.generator.sample.MethodTestCase.methodWithException() throws java.lang.Exception") :
    try {
        ((MethodTestCase) instance).methodWithException();
        return null;
    }
    catch(Exception e) {
      throw new InvocationTargetException(e);
    }
      default :
    throw new InvocationTargetException(new java.lang.NoSuchMethodException("method:" + signature + " not found"));
    }
  }

  @Override
  public Object newInstance(String signature, Object... params) throws InvocationTargetException {
    switch(signature) {
      default :
    throw new InvocationTargetException(new java.lang.NoSuchMethodException("constructor:" + signature + " not found"));
    }
  }
}

annotation methods 0
annotation fields 0
annotation interface javax.inject.Inject
annotation methods 1
annotation fields 0
annotation interface java.lang.SuppressWarnings
annotation methods 0
annotation fields 0
annotation interface java.lang.Deprecated
Dumping Annotations implementations: 

package org.reflection_no_reflection.generator.sample.gen;

import java.lang.Class;
import javax.inject.Inject;

public final class Inject$$Impl implements Inject {
  public final Class annotationType() {
    return javax.inject.Inject.class;
  }
}

Dumping Annotations implementations: 

package org.reflection_no_reflection.generator.sample.gen;

import java.lang.Class;
import java.lang.String;
import java.lang.SuppressWarnings;

public final class SuppressWarnings$$Impl implements SuppressWarnings {
  private String[] value;

  public final Class annotationType() {
    return java.lang.SuppressWarnings.class;
  }

  public void setValue(String[] value) {
    this.value = value;
  }

  public String[] value() {
    return value;
  }
}

Dumping Annotations implementations: 

package org.reflection_no_reflection.generator.sample.gen;

import java.lang.Class;
import java.lang.Deprecated;

public final class Deprecated$$Impl implements Deprecated {
  public final Class annotationType() {
    return java.lang.Deprecated.class;
  }
}

warning: File for type 'org.reflection_no_reflection.generator.sample.gen.ModuleImpl' created in the last round will not be subject to annotation processing.
warning: File for type 'org.reflection_no_reflection.generator.sample.Bar$$Reflector' created in the last round will not be subject to annotation processing.
warning: File for type 'org.reflection_no_reflection.generator.sample.Foo$$Reflector' created in the last round will not be subject to annotation processing.
warning: File for type 'org.reflection_no_reflection.generator.sample.Qurtz$$Reflector' created in the last round will not be subject to annotation processing.
warning: File for type 'org.reflection_no_reflection.generator.sample.FieldTestCase$$Reflector' created in the last round will not be subject to annotation processing.
warning: File for type 'org.reflection_no_reflection.generator.sample.ConstructorTestCase$$Reflector' created in the last round will not be subject to annotation processing.
warning: File for type 'org.reflection_no_reflection.generator.sample.AnnotationTestCase$$Reflector' created in the last round will not be subject to annotation processing.
warning: File for type 'org.reflection_no_reflection.generator.sample.MethodTestCase$$Reflector' created in the last round will not be subject to annotation processing.
warning: File for type 'org.reflection_no_reflection.generator.sample.gen.Inject$$Impl' created in the last round will not be subject to annotation processing.
warning: File for type 'org.reflection_no_reflection.generator.sample.gen.SuppressWarnings$$Impl' created in the last round will not be subject to annotation processing.
warning: File for type 'org.reflection_no_reflection.generator.sample.gen.Deprecated$$Impl' created in the last round will not be subject to annotation processing.
warning: The following options were not recognized by any processor: '[maxLevel, targetPackageName, introspector.excludes, introspector.includes]'
Note: Some input files use unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
11 warnings
:generator-integration-tests:processResources UP-TO-DATE
:generator-integration-tests:classes
:generator-integration-tests:jar
:generator-integration-tests:assemble
:generator-integration-tests:build

BUILD SUCCESSFUL

Total time: 6.232 secs

2018-05-21 02:38:33,642 INFO  ProjectTaskService - Detecting possible tasks...
2018-05-21 02:38:33,642 INFO  SysUtils - Execute command: [/tmp/rdisk/1263/src/reflection-no-reflection-master/gradlew, -b, /tmp/rdisk/1263/src/reflection-no-reflection-master/common-lib/build.gradle, -Dorg.gradle.daemon=false, -Dorg.gradle.daemon.performance.enable-monitoring=false, -Dorg.gradle.configureondemand=true, tasks]
2018-05-21 02:38:38,429 INFO  ProjectTaskService - Detected possible tasks: 42
2018-05-21 02:38:38,429 INFO  ProjectTaskService - Excluded tasks (3): javadoc test check
2018-05-21 02:38:38,429 INFO  SysUtils - Execute command: [/tmp/rdisk/1263/src/reflection-no-reflection-master/gradlew, -b, /tmp/rdisk/1263/src/reflection-no-reflection-master/common-lib/build.gradle, -Dorg.gradle.daemon=false, -Dorg.gradle.daemon.performance.enable-monitoring=false, -Dorg.gradle.configureondemand=true, --stacktrace, -x, javadoc, -x, test, -x, check, build]
2018-05-21 02:38:42,539 INFO  SysUtils - Configuration on demand is an incubating feature.
:common-lib:compileJava UP-TO-DATE
:common-lib:processResources UP-TO-DATE
:common-lib:classes UP-TO-DATE
:common-lib:jar
:common-lib:assemble
:common-lib:build

BUILD SUCCESSFUL

Total time: 3.69 secs

2018-05-21 02:38:42,549 INFO  ProjectTaskService - Detecting possible tasks...
2018-05-21 02:38:42,549 INFO  SysUtils - Execute command: [/tmp/rdisk/1263/src/reflection-no-reflection-master/gradlew, -b, /tmp/rdisk/1263/src/reflection-no-reflection-master/generator/build.gradle, -Dorg.gradle.daemon=false, -Dorg.gradle.daemon.performance.enable-monitoring=false, -Dorg.gradle.configureondemand=true, tasks]
2018-05-21 02:38:46,875 INFO  ProjectTaskService - Detected possible tasks: 42
2018-05-21 02:38:46,875 INFO  ProjectTaskService - Excluded tasks (3): javadoc test check
2018-05-21 02:38:46,875 INFO  SysUtils - Execute command: [/tmp/rdisk/1263/src/reflection-no-reflection-master/gradlew, -b, /tmp/rdisk/1263/src/reflection-no-reflection-master/generator/build.gradle, -Dorg.gradle.daemon=false, -Dorg.gradle.daemon.performance.enable-monitoring=false, -Dorg.gradle.configureondemand=true, --stacktrace, -x, javadoc, -x, test, -x, check, build]
2018-05-21 02:38:52,245 INFO  SysUtils - Configuration on demand is an incubating feature.
:common-lib:compileJava UP-TO-DATE
:common-lib:processResources UP-TO-DATE
:common-lib:classes UP-TO-DATE
:common-lib:jar UP-TO-DATE
:processor:compileJavaNote: /tmp/rdisk/1263/src/reflection-no-reflection-master/processor/src/main/java/org/reflection_no_reflection/processor/Processor.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.

:processor:processResources UP-TO-DATE
:processor:classes
:processor:jar
:generator:compileJavaNote: /tmp/rdisk/1263/src/reflection-no-reflection-master/generator/src/main/java/org/reflection_no_reflection/generator/annotation/AnnotationCreatorClassPoolVisitor.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.

:generator:processResources UP-TO-DATE
:generator:classes
:generator:jar
:generator:assemble
:generator:build

BUILD SUCCESSFUL

Total time: 4.959 secs

2018-05-21 02:38:52,255 INFO  ProjectTaskService - Detecting possible tasks...
2018-05-21 02:38:52,255 INFO  SysUtils - Execute command: [/tmp/rdisk/1263/src/reflection-no-reflection-master/gradlew, -b, /tmp/rdisk/1263/src/reflection-no-reflection-master/processor-sample/build.gradle, -Dorg.gradle.daemon=false, -Dorg.gradle.daemon.performance.enable-monitoring=false, -Dorg.gradle.configureondemand=true, tasks]
2018-05-21 02:38:56,473 INFO  ProjectTaskService - Detected possible tasks: 42
2018-05-21 02:38:56,474 INFO  ProjectTaskService - Excluded tasks (3): javadoc test check
2018-05-21 02:38:56,474 INFO  SysUtils - Execute command: [/tmp/rdisk/1263/src/reflection-no-reflection-master/gradlew, -b, /tmp/rdisk/1263/src/reflection-no-reflection-master/processor-sample/build.gradle, -Dorg.gradle.daemon=false, -Dorg.gradle.daemon.performance.enable-monitoring=false, -Dorg.gradle.configureondemand=true, --stacktrace, -x, javadoc, -x, test, -x, check, build]
2018-05-21 02:39:01,379 INFO  SysUtils - Configuration on demand is an incubating feature.
:common-lib:compileJava UP-TO-DATE
:common-lib:processResources UP-TO-DATE
:common-lib:classes UP-TO-DATE
:common-lib:jar UP-TO-DATE
:processor:compileJava UP-TO-DATE
:processor:processResources UP-TO-DATE
:processor:classes UP-TO-DATE
:processor:jar UP-TO-DATE
:processor-sample:compileJava
:processor-sample:processResources UP-TO-DATE
:processor-sample:classes
:processor-sample:jar UP-TO-DATE
:processor-sample:assemble UP-TO-DATE
:processor-sample:build

BUILD SUCCESSFUL

Total time: 4.495 secs

2018-05-21 02:39:01,388 INFO  ProjectTaskService - Detecting possible tasks...
2018-05-21 02:39:01,388 INFO  SysUtils - Execute command: [/tmp/rdisk/1263/src/reflection-no-reflection-master/gradlew, -b, /tmp/rdisk/1263/src/reflection-no-reflection-master/processor/build.gradle, -Dorg.gradle.daemon=false, -Dorg.gradle.daemon.performance.enable-monitoring=false, -Dorg.gradle.configureondemand=true, tasks]
2018-05-21 02:39:05,572 INFO  ProjectTaskService - Detected possible tasks: 42
2018-05-21 02:39:05,572 INFO  ProjectTaskService - Excluded tasks (3): javadoc test check
2018-05-21 02:39:05,572 INFO  SysUtils - Execute command: [/tmp/rdisk/1263/src/reflection-no-reflection-master/gradlew, -b, /tmp/rdisk/1263/src/reflection-no-reflection-master/processor/build.gradle, -Dorg.gradle.daemon=false, -Dorg.gradle.daemon.performance.enable-monitoring=false, -Dorg.gradle.configureondemand=true, --stacktrace, -x, javadoc, -x, test, -x, check, build]
2018-05-21 02:39:09,675 INFO  SysUtils - Configuration on demand is an incubating feature.
:common-lib:compileJava UP-TO-DATE
:common-lib:processResources UP-TO-DATE
:common-lib:classes UP-TO-DATE
:common-lib:jar UP-TO-DATE
:processor:compileJava UP-TO-DATE
:processor:processResources UP-TO-DATE
:processor:classes UP-TO-DATE
:processor:jar UP-TO-DATE
:processor:assemble UP-TO-DATE
:processor:build

BUILD SUCCESSFUL

Total time: 3.704 secs

2018-05-21 02:39:09,684 INFO  ProjectTaskService - Detecting possible tasks...
2018-05-21 02:39:09,684 INFO  SysUtils - Execute command: [/tmp/rdisk/1263/src/reflection-no-reflection-master/gradlew, -b, /tmp/rdisk/1263/src/reflection-no-reflection-master/sample-exploded/build.gradle, -Dorg.gradle.daemon=false, -Dorg.gradle.daemon.performance.enable-monitoring=false, -Dorg.gradle.configureondemand=true, tasks]
2018-05-21 02:39:13,139 ERROR ProjectTaskService - Could not detect possible Gradle tasks: Process exited with an error: 1 (Exit value: 1)
2018-05-21 02:39:13,139 INFO  ProjectTaskService - Detected possible tasks: 0
2018-05-21 02:39:13,139 INFO  ProjectTaskService - Excluded tasks (0): none
2018-05-21 02:39:13,139 INFO  SysUtils - Execute command: [/tmp/rdisk/1263/src/reflection-no-reflection-master/gradlew, -b, /tmp/rdisk/1263/src/reflection-no-reflection-master/sample-exploded/build.gradle, -Dorg.gradle.daemon=false, -Dorg.gradle.daemon.performance.enable-monitoring=false, -Dorg.gradle.configureondemand=true, --stacktrace, build]
2018-05-21 02:39:15,737 ERROR SysUtils - Could not process external command
org.apache.commons.exec.ExecuteException: Process exited with an error: 1 (Exit value: 1)
	at org.apache.commons.exec.DefaultExecutor.executeInternal(DefaultExecutor.java:404)
	at org.apache.commons.exec.DefaultExecutor.execute(DefaultExecutor.java:166)
	at com.github.vbauer.apkmaster.util.SysUtils.execute(SysUtils.java:67)
	at com.github.vbauer.apkmaster.util.SysUtils.executeSimple(SysUtils.java:43)
	at com.github.vbauer.apkmaster.service.assembly.ProjectBuildService.buildProject(ProjectBuildService.java:78)
	at com.github.vbauer.apkmaster.service.assembly.ProjectBuildService.buildProject(ProjectBuildService.java:64)
	at com.github.vbauer.apkmaster.service.assembly.ProjectBuildService.buildProject(ProjectBuildService.java:43)
	at com.github.vbauer.apkmaster.service.FullProcessService.build(FullProcessService.java:84)
	at com.github.vbauer.apkmaster.service.FullProcessService.process(FullProcessService.java:34)
	at com.github.vbauer.apkmaster.app.MainApplication.process(MainApplication.java:38)
	at com.github.vbauer.apkmaster.app.MainApplication.main(MainApplication.java:20)
	at sun.reflect.GeneratedMethodAccessor9.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at com.android.arsenal.util.ReflectionUtils.invoke(ReflectionUtils.java:42)
	at com.android.arsenal.util.ApkMasterUtils.main(ApkMasterUtils.java:30)
	at com.android.arsenal.service.processor.impl.BuildProcessorServiceImpl.buildProject(BuildProcessorServiceImpl.java:197)
	at com.android.arsenal.service.processor.impl.BuildProcessorServiceImpl.build(BuildProcessorServiceImpl.java:131)
	at com.android.arsenal.service.processor.impl.BuildProcessorServiceImpl.lambda$null$1(BuildProcessorServiceImpl.java:114)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2018-05-21 02:39:15,738 INFO  SysUtils - Configuration on demand is an incubating feature.

FAILURE: Build failed with an exception.

* Where:
Build file '/tmp/rdisk/1263/src/reflection-no-reflection-master/sample-exploded/build.gradle' line: 9

* What went wrong:
A problem occurred evaluating root project 'sample-exploded'.
> Project with path ':common-lib' could not be found in root project 'sample-exploded'.

* Try:
Run with --info or --debug option to get more log output.

* Exception is:
org.gradle.api.GradleScriptException: A problem occurred evaluating root project 'sample-exploded'.
	at org.gradle.groovy.scripts.internal.DefaultScriptRunnerFactory$ScriptRunnerImpl.run(DefaultScriptRunnerFactory.java:54)
	at org.gradle.configuration.DefaultScriptPluginFactory$ScriptPluginImpl.apply(DefaultScriptPluginFactory.java:148)
	at org.gradle.configuration.project.BuildScriptProcessor.execute(BuildScriptProcessor.java:39)
	at org.gradle.configuration.project.BuildScriptProcessor.execute(BuildScriptProcessor.java:26)
	at org.gradle.configuration.project.ConfigureActionsProjectEvaluator.evaluate(ConfigureActionsProjectEvaluator.java:34)
	at org.gradle.configuration.project.LifecycleProjectEvaluator.evaluate(LifecycleProjectEvaluator.java:59)
	at org.gradle.api.internal.project.AbstractProject.evaluate(AbstractProject.java:504)
	at org.gradle.api.internal.project.AbstractProject.evaluate(AbstractProject.java:83)
	at org.gradle.execution.TaskPathProjectEvaluator.configure(TaskPathProjectEvaluator.java:35)
	at org.gradle.configuration.DefaultBuildConfigurer.configure(DefaultBuildConfigurer.java:33)
	at org.gradle.initialization.DefaultGradleLauncher.doBuildStages(DefaultGradleLauncher.java:129)
	at org.gradle.initialization.DefaultGradleLauncher.doBuild(DefaultGradleLauncher.java:106)
	at org.gradle.initialization.DefaultGradleLauncher.run(DefaultGradleLauncher.java:86)
	at org.gradle.launcher.exec.InProcessBuildActionExecuter$DefaultBuildController.run(InProcessBuildActionExecuter.java:80)
	at org.gradle.launcher.cli.ExecuteBuildAction.run(ExecuteBuildAction.java:33)
	at org.gradle.launcher.cli.ExecuteBuildAction.run(ExecuteBuildAction.java:24)
	at org.gradle.launcher.exec.InProcessBuildActionExecuter.execute(InProcessBuildActionExecuter.java:36)
	at org.gradle.launcher.exec.InProcessBuildActionExecuter.execute(InProcessBuildActionExecuter.java:26)
	at org.gradle.launcher.cli.RunBuildAction.run(RunBuildAction.java:51)
	at org.gradle.internal.Actions$RunnableActionAdapter.execute(Actions.java:171)
	at org.gradle.launcher.cli.CommandLineActionFactory$ParseAndBuildAction.execute(CommandLineActionFactory.java:237)
	at org.gradle.launcher.cli.CommandLineActionFactory$ParseAndBuildAction.execute(CommandLineActionFactory.java:210)
	at org.gradle.launcher.cli.JavaRuntimeValidationAction.execute(JavaRuntimeValidationAction.java:35)
	at org.gradle.launcher.cli.JavaRuntimeValidationAction.execute(JavaRuntimeValidationAction.java:24)
	at org.gradle.launcher.cli.CommandLineActionFactory$WithLogging.execute(CommandLineActionFactory.java:206)
	at org.gradle.launcher.cli.CommandLineActionFactory$WithLogging.execute(CommandLineActionFactory.java:169)
	at org.gradle.launcher.cli.ExceptionReportingAction.execute(ExceptionReportingAction.java:33)
	at org.gradle.launcher.cli.ExceptionReportingAction.execute(ExceptionReportingAction.java:22)
	at org.gradle.launcher.Main.doAction(Main.java:33)
	at org.gradle.launcher.bootstrap.EntryPoint.run(EntryPoint.java:45)
	at org.gradle.launcher.bootstrap.ProcessBootstrap.runNoExit(ProcessBootstrap.java:54)
	at org.gradle.launcher.bootstrap.ProcessBootstrap.run(ProcessBootstrap.java:35)
	at org.gradle.launcher.GradleMain.main(GradleMain.java:23)
	at org.gradle.wrapper.BootstrapMainStarter.start(BootstrapMainStarter.java:30)
	at org.gradle.wrapper.WrapperExecutor.execute(WrapperExecutor.java:127)
	at org.gradle.wrapper.GradleWrapperMain.main(GradleWrapperMain.java:56)
Caused by: org.gradle.api.UnknownProjectException: Project with path ':common-lib' could not be found in root project 'sample-exploded'.
	at org.gradle.api.internal.project.AbstractProject.project(AbstractProject.java:450)
	at org.gradle.api.internal.BeanDynamicObject$MetaClassAdapter.invokeMethod(BeanDynamicObject.java:225)
	at org.gradle.api.internal.BeanDynamicObject.invokeMethod(BeanDynamicObject.java:129)
	at org.gradle.api.internal.CompositeDynamicObject.invokeMethod(CompositeDynamicObject.java:147)
	at org.gradle.groovy.scripts.BasicScript.methodMissing(BasicScript.java:79)
	at build_bln7mybkomewrzpjrgfs7kihq$_run_closure2.doCall(/tmp/rdisk/1263/src/reflection-no-reflection-master/sample-exploded/build.gradle:9)
	at org.gradle.api.internal.ClosureBackedAction.execute(ClosureBackedAction.java:63)
	at org.gradle.util.ConfigureUtil.configure(ConfigureUtil.java:130)
	at org.gradle.util.ConfigureUtil.configure(ConfigureUtil.java:91)
	at org.gradle.api.internal.project.AbstractProject.dependencies(AbstractProject.java:843)
	at org.gradle.api.internal.BeanDynamicObject$MetaClassAdapter.invokeMethod(BeanDynamicObject.java:225)
	at org.gradle.api.internal.BeanDynamicObject.invokeMethod(BeanDynamicObject.java:129)
	at org.gradle.api.internal.CompositeDynamicObject.invokeMethod(CompositeDynamicObject.java:147)
	at org.gradle.groovy.scripts.BasicScript.methodMissing(BasicScript.java:79)
	at build_bln7mybkomewrzpjrgfs7kihq.run(/tmp/rdisk/1263/src/reflection-no-reflection-master/sample-exploded/build.gradle:8)
	at org.gradle.groovy.scripts.internal.DefaultScriptRunnerFactory$ScriptRunnerImpl.run(DefaultScriptRunnerFactory.java:52)
	... 35 more


BUILD FAILED

Total time: 2.49 secs

2018-05-21 02:39:15,747 INFO  ProjectTaskService - Detecting possible tasks...
2018-05-21 02:39:15,747 INFO  SysUtils - Execute command: [/tmp/rdisk/1263/src/reflection-no-reflection-master/gradlew, -b, /tmp/rdisk/1263/src/reflection-no-reflection-master/sample/build.gradle, -Dorg.gradle.daemon=false, -Dorg.gradle.daemon.performance.enable-monitoring=false, -Dorg.gradle.configureondemand=true, tasks]
2018-05-21 02:39:19,610 ERROR ProjectTaskService - Could not detect possible Gradle tasks: Process exited with an error: 1 (Exit value: 1)
2018-05-21 02:39:19,611 INFO  ProjectTaskService - Detected possible tasks: 0
2018-05-21 02:39:19,611 INFO  ProjectTaskService - Excluded tasks (0): none
2018-05-21 02:39:19,611 INFO  SysUtils - Execute command: [/tmp/rdisk/1263/src/reflection-no-reflection-master/gradlew, -b, /tmp/rdisk/1263/src/reflection-no-reflection-master/sample/build.gradle, -Dorg.gradle.daemon=false, -Dorg.gradle.daemon.performance.enable-monitoring=false, -Dorg.gradle.configureondemand=true, --stacktrace, build]
2018-05-21 02:39:22,473 ERROR SysUtils - Could not process external command
org.apache.commons.exec.ExecuteException: Process exited with an error: 1 (Exit value: 1)
	at org.apache.commons.exec.DefaultExecutor.executeInternal(DefaultExecutor.java:404)
	at org.apache.commons.exec.DefaultExecutor.execute(DefaultExecutor.java:166)
	at com.github.vbauer.apkmaster.util.SysUtils.execute(SysUtils.java:67)
	at com.github.vbauer.apkmaster.util.SysUtils.executeSimple(SysUtils.java:43)
	at com.github.vbauer.apkmaster.service.assembly.ProjectBuildService.buildProject(ProjectBuildService.java:78)
	at com.github.vbauer.apkmaster.service.assembly.ProjectBuildService.buildProject(ProjectBuildService.java:64)
	at com.github.vbauer.apkmaster.service.assembly.ProjectBuildService.buildProject(ProjectBuildService.java:43)
	at com.github.vbauer.apkmaster.service.FullProcessService.build(FullProcessService.java:84)
	at com.github.vbauer.apkmaster.service.FullProcessService.process(FullProcessService.java:34)
	at com.github.vbauer.apkmaster.app.MainApplication.process(MainApplication.java:38)
	at com.github.vbauer.apkmaster.app.MainApplication.main(MainApplication.java:20)
	at sun.reflect.GeneratedMethodAccessor9.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at com.android.arsenal.util.ReflectionUtils.invoke(ReflectionUtils.java:42)
	at com.android.arsenal.util.ApkMasterUtils.main(ApkMasterUtils.java:30)
	at com.android.arsenal.service.processor.impl.BuildProcessorServiceImpl.buildProject(BuildProcessorServiceImpl.java:197)
	at com.android.arsenal.service.processor.impl.BuildProcessorServiceImpl.build(BuildProcessorServiceImpl.java:131)
	at com.android.arsenal.service.processor.impl.BuildProcessorServiceImpl.lambda$null$1(BuildProcessorServiceImpl.java:114)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2018-05-21 02:39:22,473 INFO  SysUtils - Configuration on demand is an incubating feature.

FAILURE: Build failed with an exception.

* Where:
Build file '/tmp/rdisk/1263/src/reflection-no-reflection-master/sample/build.gradle' line: 26

* What went wrong:
A problem occurred evaluating root project 'sample'.
> Project with path ':processor-sample' could not be found in root project 'sample'.

* Try:
Run with --info or --debug option to get more log output.

* Exception is:
org.gradle.api.GradleScriptException: A problem occurred evaluating root project 'sample'.
	at org.gradle.groovy.scripts.internal.DefaultScriptRunnerFactory$ScriptRunnerImpl.run(DefaultScriptRunnerFactory.java:54)
	at org.gradle.configuration.DefaultScriptPluginFactory$ScriptPluginImpl.apply(DefaultScriptPluginFactory.java:148)
	at org.gradle.configuration.project.BuildScriptProcessor.execute(BuildScriptProcessor.java:39)
	at org.gradle.configuration.project.BuildScriptProcessor.execute(BuildScriptProcessor.java:26)
	at org.gradle.configuration.project.ConfigureActionsProjectEvaluator.evaluate(ConfigureActionsProjectEvaluator.java:34)
	at org.gradle.configuration.project.LifecycleProjectEvaluator.evaluate(LifecycleProjectEvaluator.java:59)
	at org.gradle.api.internal.project.AbstractProject.evaluate(AbstractProject.java:504)
	at org.gradle.api.internal.project.AbstractProject.evaluate(AbstractProject.java:83)
	at org.gradle.execution.TaskPathProjectEvaluator.configure(TaskPathProjectEvaluator.java:35)
	at org.gradle.configuration.DefaultBuildConfigurer.configure(DefaultBuildConfigurer.java:33)
	at org.gradle.initialization.DefaultGradleLauncher.doBuildStages(DefaultGradleLauncher.java:129)
	at org.gradle.initialization.DefaultGradleLauncher.doBuild(DefaultGradleLauncher.java:106)
	at org.gradle.initialization.DefaultGradleLauncher.run(DefaultGradleLauncher.java:86)
	at org.gradle.launcher.exec.InProcessBuildActionExecuter$DefaultBuildController.run(InProcessBuildActionExecuter.java:80)
	at org.gradle.launcher.cli.ExecuteBuildAction.run(ExecuteBuildAction.java:33)
	at org.gradle.launcher.cli.ExecuteBuildAction.run(ExecuteBuildAction.java:24)
	at org.gradle.launcher.exec.InProcessBuildActionExecuter.execute(InProcessBuildActionExecuter.java:36)
	at org.gradle.launcher.exec.InProcessBuildActionExecuter.execute(InProcessBuildActionExecuter.java:26)
	at org.gradle.launcher.cli.RunBuildAction.run(RunBuildAction.java:51)
	at org.gradle.internal.Actions$RunnableActionAdapter.execute(Actions.java:171)
	at org.gradle.launcher.cli.CommandLineActionFactory$ParseAndBuildAction.execute(CommandLineActionFactory.java:237)
	at org.gradle.launcher.cli.CommandLineActionFactory$ParseAndBuildAction.execute(CommandLineActionFactory.java:210)
	at org.gradle.launcher.cli.JavaRuntimeValidationAction.execute(JavaRuntimeValidationAction.java:35)
	at org.gradle.launcher.cli.JavaRuntimeValidationAction.execute(JavaRuntimeValidationAction.java:24)
	at org.gradle.launcher.cli.CommandLineActionFactory$WithLogging.execute(CommandLineActionFactory.java:206)
	at org.gradle.launcher.cli.CommandLineActionFactory$WithLogging.execute(CommandLineActionFactory.java:169)
	at org.gradle.launcher.cli.ExceptionReportingAction.execute(ExceptionReportingAction.java:33)
	at org.gradle.launcher.cli.ExceptionReportingAction.execute(ExceptionReportingAction.java:22)
	at org.gradle.launcher.Main.doAction(Main.java:33)
	at org.gradle.launcher.bootstrap.EntryPoint.run(EntryPoint.java:45)
	at org.gradle.launcher.bootstrap.ProcessBootstrap.runNoExit(ProcessBootstrap.java:54)
	at org.gradle.launcher.bootstrap.ProcessBootstrap.run(ProcessBootstrap.java:35)
	at org.gradle.launcher.GradleMain.main(GradleMain.java:23)
	at org.gradle.wrapper.BootstrapMainStarter.start(BootstrapMainStarter.java:30)
	at org.gradle.wrapper.WrapperExecutor.execute(WrapperExecutor.java:127)
	at org.gradle.wrapper.GradleWrapperMain.main(GradleWrapperMain.java:56)
Caused by: org.gradle.api.UnknownProjectException: Project with path ':processor-sample' could not be found in root project 'sample'.
	at org.gradle.api.internal.project.AbstractProject.project(AbstractProject.java:450)
	at org.gradle.api.internal.BeanDynamicObject$MetaClassAdapter.invokeMethod(BeanDynamicObject.java:225)
	at org.gradle.api.internal.BeanDynamicObject.invokeMethod(BeanDynamicObject.java:129)
	at org.gradle.api.internal.CompositeDynamicObject.invokeMethod(CompositeDynamicObject.java:147)
	at org.gradle.groovy.scripts.BasicScript.methodMissing(BasicScript.java:79)
	at build_bjl5tfrnucl6ev4e9wuthmjj5$_run_closure3.doCall(/tmp/rdisk/1263/src/reflection-no-reflection-master/sample/build.gradle:26)
	at org.gradle.api.internal.ClosureBackedAction.execute(ClosureBackedAction.java:63)
	at org.gradle.util.ConfigureUtil.configure(ConfigureUtil.java:130)
	at org.gradle.util.ConfigureUtil.configure(ConfigureUtil.java:91)
	at org.gradle.api.internal.project.AbstractProject.dependencies(AbstractProject.java:843)
	at org.gradle.api.internal.BeanDynamicObject$MetaClassAdapter.invokeMethod(BeanDynamicObject.java:225)
	at org.gradle.api.internal.BeanDynamicObject.invokeMethod(BeanDynamicObject.java:129)
	at org.gradle.api.internal.CompositeDynamicObject.invokeMethod(CompositeDynamicObject.java:147)
	at org.gradle.groovy.scripts.BasicScript.methodMissing(BasicScript.java:79)
	at build_bjl5tfrnucl6ev4e9wuthmjj5.run(/tmp/rdisk/1263/src/reflection-no-reflection-master/sample/build.gradle:25)
	at org.gradle.groovy.scripts.internal.DefaultScriptRunnerFactory$ScriptRunnerImpl.run(DefaultScriptRunnerFactory.java:52)
	... 35 more


BUILD FAILED

Total time: 2.708 secs

2018-05-21 02:39:22,482 ERROR FullProcessService - Project build has not produced APK file
2018-05-21 02:39:22,490 ERROR FullProcessService - Could not find generated or existed APK file
